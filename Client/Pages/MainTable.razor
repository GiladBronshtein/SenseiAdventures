@page "/maintable"
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime;
@using template.Shared.Models.Games
@using template.Shared.Models.Users
@using template.Client.Components

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-9">
            <div class="row">
                <div class="col-12 col-sm-12">
                    <div class="row">
                        <!-- Button - Create New Game -->
                        <button type="button" class="shadow-sm btn btn-primary btn-lg mb-5" data-bs-toggle="modal" data-bs-target="#staticBackdrop" style="height: 60px; width: 240px;">
                            <span style="vertical-align: middle;">יצירת משחק חדש</span>
                            <span style="vertical-align: middle;">
                                <i class="fa-solid fa-square-plus" style="font-size: 36px; vertical-align: middle;"></i>
                            </span>
                        </button>

                        <!-- Create NEW GAME Modal -->
                        <div class="modal fade @(isModalOpen ? "show" : "")" style="display: @(isModalOpen ? "block" : "none");" id="staticBackdrop"
                             data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="staticBackdropLabel">משחק חדש</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ClearGameInputFields"></button>
                                    </div>
                                    <div class="modal-body">
                                        <!-- Form for new game creation -->
                                        <EditForm Model="gameToAdd" OnValidSubmit="CreateGame" OnInvalidSubmit="failedSubmit">
                                            <DataAnnotationsValidator />
                                            <!-- Game Name -->
                                            <div class="mb-3">
                                                <label for="gameName" class="form-label">שם המשחק</label>
                                                <span>(2-30 תווים)</span>
                                                <InputText maxlength="30"
                                                           @oninput="@(e => { HandleInputChange(e, nameof(gameToAdd.GameName)); gameToAdd.GameName = e.Value.ToString(); StateHasChanged(); })"
                                                           id="gameName"
                                                           class="form-control"
                                                           @bind-Value="gameToAdd.GameName"
                                                           aria-describedby="gameNameHelp" required />

                                                <small id="gameName" class="@GetInputClass(gameToAdd?.GameName?.Length ?? 0, 2, 30)">@((gameToAdd?.GameName?.Length ?? 0).ToString())/30</small>
                                                <ValidationMessage For="@(() => gameToAdd.GameName)" style="color:Red;" />
                                            </div>

                                            <!-- Ending Message -->
                                            <div class="mb-3">
                                                <label for="endingMessage" class="form-label">הודעת הסיום</label>
                                                <span>(2-30 תווים)</span>
                                                <InputText maxlength="30"
                                                           @oninput="@(e => { HandleInputChange(e, nameof(gameToAdd.EndingMessage)); gameToAdd.EndingMessage = e.Value.ToString(); StateHasChanged(); })"
                                                           id="endingMessage"
                                                           class="form-control"
                                                           @bind-Value="gameToAdd.EndingMessage"
                                                           aria-describedby="endingMessageHelp" required />

                                                <small id="endingMessage" class="@GetInputClass(gameToAdd?.EndingMessage?.Length ?? 0, 2, 30)">@((gameToAdd?.EndingMessage?.Length ?? 0).ToString())/30</small>
                                                <ValidationMessage For="@(() => gameToAdd.EndingMessage)" style="color:Red;" />
                                            </div>

                                            <!-- Image upload input -->
                                            <div class="mb-3">
                                                <label for="gameImage" class="form-label">תמונת המשחק</label>
                                                @if (myFileImage != "")
                                                {
                                                    <div class="img-wrapper">
                                                        <img src="@myFileImage" class="QuestionImage" width="30" />
                                                        <i class="fa-solid fa-trash delete-image-btn" @onclick='() => MakeDeleteList(myFileImage)'></i>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-2 ps-1">
                                                        <label class="btn btn-outline-dark btn-sm" for="FileInputID">
                                                            <i class="fa-solid fa-image "></i>
                                                        </label>
                                                        <InputFile id="FileInputID" OnChange="@(e => UploadFile(e, "FileInputID"))" hidden />
                                                    </div>
                                                }
                                            </div>

                                            <!-- Submit / Cancel Buttons -->
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="ClearGameInputFields">חזרה</button>
                                                <button type="submit" value="send" class="btn btn-primary">שמירה</button>
                                            </div>
                                        </EditForm>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!--Main Games Table-->
                        <h5>טבלת המשחקים</h5>
                        <div class="mt-3 col-md-12 table-responsive scrollable-table-body">
                            <table class="table shadow-sm border border-1">
                                <!--Table HEADER-->
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">קוד<Tooltip Text="באמצעות הקוד מתחילים משחק"><i class="fa-solid fa-circle-info"></i></Tooltip>
                                        </th>
                                        <th scope="col">שם המשחק<Tooltip Text="דוגמא בלבד - פה יהיה הסבר"><i class="fa-solid fa-circle-info"></i></Tooltip>
                                        </th>
                                        <th scope="col" class="col-auto text-center">עריכה<Tooltip Text="דוגמא בלבד - פה יהיה הסבר"><i class="fa-solid fa-circle-info"></i></Tooltip>
                                        </th>
                                        <th scope="col" class="col-auto text-center">פרסום<Tooltip Text="דוגמא בלבד - פה יהיה הסבר"><i class="fa-solid fa-circle-info"></i> </Tooltip>
                                        </th>
                                        <th scope="col" class="col-auto text-center">סטטיסטיקה<Tooltip Text="דוגמא בלבד - פה יהיה הסבר"><i class="fa-solid fa-circle-info"></i> </Tooltip>
                                        </th>
                                        <th scope="col" class="col-auto text-center">מחיקה<Tooltip Text="דוגמא בלבד - פה יהיה הסבר"><i class="fa-solid fa-circle-info"></i></Tooltip>
                                        </th>
                                    </tr>
                                </thead>

                                <!--Table TBODY-->
                                <tbody class="scrollbar-tbody custom-scrollable-tbody">
                                    @if (GamesList != null && GamesList.Count > 0)
                                    {
                                        @foreach (var game in GamesList)
                                        {
                                            <tr>
                                                <td><b>@game.GameCode</b></td>
                                                <td>@game.GameName</td>
                                                <td class="col-auto text-center"><i class="fa-solid fa-file-pen icon link-success" @onclick="()=>EditGame(game)"></i></td>
                                                <td class="col-auto text-center">
                                                    @if (game.CanPublish == false)
                                                    {
                                                        <div>
                                                            <input class="form-check-input" type="checkbox" id="@game.ID" value="" aria-label="..." disabled>
                                                            <label for="@game.ID" />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div>
                                                            <input class="form-check-input" type="checkbox" id="@game.ID" checked="@game.IsPublished" @onchange="()=>changePublish(game)" />
                                                            <label for="@game.ID"></label>
                                                        </div>
                                                    }
                                                </td>

                                                <td class="col-auto text-center">
                                                    <i class="fa-solid fa-chart-simple icon link-primary"></i>
                                                </td>

                                                <td class="col-auto text-center">
                                                    <i class="fa-solid fa-trash icon link-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" @onclick="() => PromptDelete(game)"></i>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center" style="font-weight:bold;">
                                                בטבלה זו יופיעו כלל המשחקים, טרם הוזנו משחקים - לחצו על "משחק חדש"
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        @if (msg != "")
                        {
                            <p>@msg</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!--PUBLISH INSTRUCTIONS-->
        <div class="col-12 col-sm-3">
            <div class="img-text-container">
                <img src="assets-images/Figure4-removebg-preview.png" class="img-fluid" alt="Responsive image">
                <div class="text-center inner">
                    <p>
                        <b>הוראות פרסום</b><br />
                        <span>מינימום 2 דוכנים</span>
                        <br />
                        <span>מינימום 20 שאלות</span>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="@(!isDeleteModalOpen)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">מחיקת משחק</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    מחיקת המשחק תבוצע לצמיתות וללא יכולת שחזור, בטוחים?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDelete">מחיקה</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public List<Games> GamesList { get; set; }

    [Parameter]
    public EventCallback<Games> OnDeleteClicked { get; set; }

    UserWithGames user;
    GameToAdd gameToAdd = new GameToAdd();
    List<string> imagesToDelete = new List<string>();

    bool isModalOpen = false;
    bool isDeleteModalOpen = false;
    bool shouldDismissModal = false;

    private Games gameToDelete;
    private int characterCount = 0;
    string msg = "";
    private bool submitSuccess = false;

    long maxFileSize = 4194304; //4MB
    string myFileImage = "";

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/game/" + UserId);
        string error = userRes.Content.ReadAsStringAsync().Result;
        if (userRes.IsSuccessStatusCode == true)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>().Result;
        }
        var gameRes = await Http.GetAsync("api/game/" + UserId + "/all");
        if (gameRes.IsSuccessStatusCode == true)
        {
            GamesList = gameRes.Content.ReadFromJsonAsync<List<Games>>().Result;
        }
        else
        {
            error = userRes.Content.ReadAsStringAsync().Result;
        }
    }

    async Task CreateGame()
    {
        var userRes = await Http.PostAsJsonAsync("api/game/" + UserId + "/addGame/", gameToAdd);
        if (userRes.IsSuccessStatusCode)
        {
            await DeleteImages();
            Games newGame = await userRes.Content.ReadFromJsonAsync<Games>();
            user.Games.Add(newGame);
            await JSRuntime.InvokeVoidAsync("dismissModal", "staticBackdrop");
            Nav.NavigateTo("./GameEdit/" + newGame.GameCode);
        }
        else
        {
            string error = await userRes.Content.ReadAsStringAsync();
            Console.WriteLine($"Error creating game: {error}");
        }
    }

    private void EditGame(Games game)
    {
        Nav.NavigateTo("./GameEdit/" + game.GameCode);
    }

    protected async Task changePublish(Games game)
    {
    }

    void PromptDelete(Games game)
    {
        gameToDelete = game;
        isDeleteModalOpen = true;
    }

    void ToggleDeleteModal(bool open)
    {
        isDeleteModalOpen = open;
    }

    async Task ConfirmDelete()
    {
        if (gameToDelete != null)
        {
            await DeleteGame(gameToDelete);
            gameToDelete = null;
            isDeleteModalOpen = false;
        }
        StateHasChanged();
    }

    private async Task DeleteGame(Games game)
    {
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteGame/{game.GameCode}");

        if (response.IsSuccessStatusCode)
        {
            GamesList.Remove(game);
            isDeleteModalOpen = false;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to delete the game");
        }
    }

    private string GetInputClass(int length, int minChars, int maxChars)
    {
        if (length == 0)
            return "text-muted";
        else if (length < minChars)
            return "text-danger";
        else if (length >= minChars && length <= maxChars - 3)
            return "text-success";
        else if (length > maxChars - 3 && length <= maxChars)
            return "text-warning";
        return "text-muted";
    }

    private void HandleInputChange(ChangeEventArgs e, string inputType)
    {
        var newValue = e.Value.ToString();
        switch (inputType)
        {
            case "gameName":
                gameToAdd.GameName = newValue;
                break;
            case "endingMessage":
                gameToAdd.EndingMessage = newValue;
                break;
            case "gameImage":
                gameToAdd.GameImage = newValue;
                break;  
            default:
                break;
        }
    }

    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        characterCount = e.Value.ToString().Length;
    }

    void failedSubmit()
    {
        Console.WriteLine("OOPS! There was a problem with creating a new game");
    }

    private async Task UploadFile(InputFileChangeEventArgs e, string inputId)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = await saveResponse.Content.ReadAsStringAsync();
                    myFileImage = "uploadedFiles/" + resizeUrl;
                    gameToAdd.GameImage = myFileImage;
                }
                else
                {
                    // Handle the error properly here
                    Console.WriteLine("Failed to upload image");
                }
            }
        }
    }

    private void MakeDeleteList(string imageToDelete)
    {
        if (!string.IsNullOrEmpty(imageToDelete))
        {
            imagesToDelete.Add(imageToDelete);
            myFileImage = ""; // Assuming you want to clear the current image variable
            StateHasChanged(); // Update the UI to reflect changes
        }
    }

    private async Task DeleteImages()
    {
        Console.WriteLine("Yo1");
        Console.WriteLine("Images to delete:" + imagesToDelete.Count.ToString());
        if (imagesToDelete.Count > 0)
        {
            var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", imagesToDelete);
            if (saveResponse.IsSuccessStatusCode == true)
            {
                imagesToDelete.Clear();
            }
            else
            {
            }
        }
    }

    private async Task ClearGameInputFields()
    {
        // Collect the images that should be deleted
        var imagesToDelete = new List<string>();
        if (!string.IsNullOrEmpty(myFileImage))
        {
            imagesToDelete.Add(myFileImage);
        }

        // Delete the images if any were uploaded
        if (imagesToDelete.Count > 0)
        {
            await DeleteImages(imagesToDelete);
        }

        // Clear input fields
        gameToAdd = new GameToAdd();
        myFileImage = "";
        StateHasChanged();
    }

    private async Task DeleteImages(List<string> imagesToDelete)
    {
        var response = await Http.PostAsJsonAsync("api/Media/deleteImages", imagesToDelete);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Images deleted successfully");
        }
        else
        {
            Console.WriteLine("Image deletion failed");
        }
    }
}