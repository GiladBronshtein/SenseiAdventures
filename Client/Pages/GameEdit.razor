@page "/GameEdit/{gameCode}"
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using template.Shared.Models.Games;
@using template.Shared.Models.Users;
@using template.Client.Components;

<div class="container-fluid">
    <div class="row">
        <!-- Main Content -->
        <div class="col-md-10 main-content">
            <div class="row">
                <div class="col-12 p-3">
                    <CascadingValue Value="currentStage">
                        @switch (currentStage)
                        {
                            case StageEnum.Stage.StageA:
                                <StageBottleBreak gameCode="@gameCode" game="@gameData" OnQuestionAdded="HandleQuestionAdded" OnQuestionDeleted="HandleQuestionDeleted" />
                                break;
                            case StageEnum.Stage.StageB:
                                <StageTargetHit />
                                break;
                            case StageEnum.Stage.StageC:
                                <StageBazzerHit />
                                break;
                            case StageEnum.Stage.StageD:
                                <StageSlashing />
                                break;
                            default:
                                <StageDefault gameDataChild="@gameData" userID="@UserId"/>
                                break;
                        }
                    </CascadingValue>
                </div>
            </div>
        </div>
        <!-- Sidebar -->
        <div class="col-md-2 d-flex flex-column bg-dark text-white p-3 sidebar">
            <!-- Sidebar Header -->
            <div class="sidebar-heading d-flex justify-content-center align-items-center text-center mt-2 mb-4">
                <a class="icon-link icon-link-hover text-white text-decoration-none" href="./maintable">
                    חזרה למשחקים
                    <svg class="bi" width="14" height="14" fill="currentColor" viewBox="0 0 14 14">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 1-.5-.5H2.707l5.147-5.146a.5.5 0 1 0-.708-.708l-6 6a.5.5 0 0 0 0 .708l6 6a.5.5 0 1 0 .708-.708L2.707 8.5H14.5a.5.5 0 0 1 .5-.5z" />
                    </svg>
                </a>
            </div>

            <!-- Stages -->
            <div class="sidebar-panel nav nav-pills flex-column">
                <span style="color:black;" class="enterExitText text-center">סיום הפסטיבל</span>
                <button type="button" class="btn btn-secondary sidebar-button" @onclick="() => SetStage(StageEnum.Stage.StageD)">לחתוך תשובות</button>
                <button type="button" class="btn btn-secondary sidebar-button" @onclick="() => SetStage(StageEnum.Stage.StageC)">פגיעה בתשובה</button>
                <button type="button" class="btn btn-secondary sidebar-button" @onclick="() => SetStage(StageEnum.Stage.StageB)">פגיעה במטרה</button>
                <button type="button" class="btn btn-secondary sidebar-button" @onclick="() => SetStage(StageEnum.Stage.StageA)">שבירת בקבוקים</button>
                <span style="color:black;" class="enterExitText text-center">כניסה לפסטיבל</span>
            </div>

            <div class="d-flex flex-column align-items-center justify-content-center ">
                <button type="button" class="btn btn-light w-100 settingsButton" @onclick="SetStageToDefault">
                    הגדרות המשחק
                    <i class="fa-solid fa-gear" aria-hidden="true"></i>
                </button>
            </div>

            <div class="d-flex flex-column align-items-center justify-content-center">
                <div class="text-center stagesAndQuestions">
                    <!-- Example text or other content -->
                    @if (gameData != null && gameData.Questions != null && gameData.Questions.Count > 0)
                    {
                        <p>
                            <span>
                                שאלות :
                                @gameData.Questions.Count
                            </span>
                            <br />
                            <span>
                                דוכנים :
                                @activeStages
                            </span>
                        </p>
                    }
                </div>
            </div>
            <div class="mt-auto">
                <hr class="bg-white">
                <!-- Sidebar Footer -->
                <div class="sidebar-footer text-center p-1">
                    <button type="button" class="btn btn-secondary w-100" value="publish">פרסום</button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public string gameCode { get; set; }

    GameDetails gameData;

    UserWithGames user;

    private int activeStages;

    private StageEnum.Stage currentStage = StageEnum.Stage.None;

    protected override async Task OnInitializedAsync()
    {

        gameData = await Http.GetFromJsonAsync<GameDetails>($"api/Game/{UserId}/getGame/{gameCode}");
        activeStages = await Http.GetFromJsonAsync<int>($"api/Game/{UserId}/getActiveStages/{gameCode}");
    }

    private async Task UpdateActiveStages()
    {
        activeStages = await Http.GetFromJsonAsync<int>($"api/Game/{UserId}/getActiveStages/{gameCode}");
        StateHasChanged(); // Force update the UI
    }

    private void SetStage(StageEnum.Stage stage)
    {
        currentStage = stage;
    }

    private async Task HandleQuestionAdded(GameQuestions question)
    {
        if (gameData.Questions == null)
        {
            gameData.Questions = new List<GameQuestions>();
        }
        gameData.Questions.Add(question);
        UpdateActiveStages();
        StateHasChanged(); // Force a re-render of the component
    }

    private void HandleQuestionDeleted(GameQuestions question)
    {
        gameData.Questions.Remove(question);
        gameData.Questions = new List<GameQuestions>(gameData.Questions); // Re-assign to force UI update
        UpdateActiveStages();

        StateHasChanged(); // Optionally force re-render
    }

    private void SetStageToDefault()
    {
        SetStage(StageEnum.Stage.None); // Assuming StageDefault is defined in your StageEnum
    }
}