@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav
@using template.Shared.Models.Games;
@using template.Shared.Models.Users;


<div class="container-fluid">

    <!-- ROW 1 - TITLE -->
    <div class="row mb-4">
        <div class="col-md-7">
            <h3>
                דוכן שבירת בקבוקים
                <button type="button" class="btn bg-primary-subtle" data-bs-toggle="modal" data-bs-target=@($"#modal1")
                        style=" --bs-btn-padding-y: .25rem;  --bs-btn-padding-x: .5rem;  --bs-btn-font-size: .75rem;"> הסבר 
                        <i class="fa fa-info-circle p-1" style="color:black;"></i>
                </button>
            </h3>
        </div>
        <div class="col-md-5 text-end">
            <button type="button" class="btn btn-secondary">כיבוי דוכן</button>
        </div>
    </div>

    <!-- ROW 2 - FORM AND QUESTION LIST -->
    <div class="row">
        <!-- Edit Form Column -->
        <div class="col-md-7 ">
            <div class="row mb-3">
                <div class="col-12">
                    <span> שאלה</span>
                    <span>(2-30 טווח תווים)</span>
                </div>
            </div>

            <EditForm Model="questionsAndAnswers" OnValidSubmit="HandleSubmit" OnInvalidSubmit="failedSubmit">
                <DataAnnotationsValidator />

                <!-- ROW - Form Input Fields -->
                <div class="mb-3 d-flex align-items-center">
                    <div class="col-7 p-0">
                        <InputText maxlength="@QuestionDescriptionMaxChars"
                                   class="form-control"
                                   id="question"
                                   @bind-Value="QuestionDescription"
                                   @oninput="@(e => HandleInputChange(e, nameof(questionsAndAnswers.Questions.QuestionDescription)))"
                                   placeholder="שאלה"
                                   aria-describedby="questionDescription" required />
                    </div>

                    <div class="col-2 pe-2">
                        <small id="questionDescription" class="@GetInputClass(QuestionDescription.Length, 2, @QuestionDescriptionMaxChars)">
                            @QuestionDescription.Length/@QuestionDescriptionMaxChars
                        </small>
                    </div>

                    
                    <div class="col-2 ps-1">

                        @if (myFileImage != "")
                        {
                            <div class="img-wrapper">
                                <img src="@myFileImage" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("FileInputID")'></i>
                            </div>
                        }
                        else
                        {
                            <div class="col-2 ps-1">
                                <label class="btn btn-outline-dark btn-sm" for="FileInputID">
                                    <i class="fa-solid fa-image "></i>
                                </label>
                                <InputFile id="FileInputID" OnChange="@(e => UploadFile(e, "FileInputID"))" hidden />
                            </div>
                        }
                    </div>
                </div>

                <div class="mb-3 mt-3 col-9"> 

                </div>

                <!-- Row -->
                <div class="row mb-3">
                    <div class="col col-12">
                        <span>תשובות לשאלה</span>
                        <span>(2-30 טווח תווים)</span>
                    </div>
                </div>

                <!-- Correct Answer -->
                <label for="correctAnswer" class="form-label">תשובה נכונה:</label>
                <div class="mb-3 align-items-center">

                    <div class="col-7">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   id="correctAnswer"
                                   @bind-Value="CorrectAnswer"
                                   @oninput="@(e => HandleInputChange(e, nameof(CorrectAnswer)))"
                                   placeholder="תשובה נכונה"
                                   aria-describedby="correctAnswer" required />
                    </div>
                    <div class="col-1 p-0">
                        <small id="correctAnswer" class="@GetInputClass(CorrectAnswer.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@CorrectAnswer.Length/@AnswersDescriptionMaxChars</small>
                    </div>

                    <div class="col-1">
                        <span>
                        או
                        </span>
                    </div>
                      @if (CorrectImage != "")
                        {

                        <div class="col-2">
                            <div class="img-wrapper">
                                <img src="@CorrectImage" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("CorrectFileInputID")'></i>
                            </div>
                        </div>
                        }
                        else
                        {
                           <div class="col-2">

                                <label class="btn btn-outline-dark btn-sm" for="CorrectFileInputID">
                                    <i class="fa-solid fa-image "></i>
                                </label>
                                <InputFile id="CorrectFileInputID" OnChange="@(e => UploadFile(e, "CorrectFileInputID"))" hidden />
                            </div>
                        }
         
                </div>


                <span>תשובות נוספות:</span>

                <!-- Wrong Answer 1 -->
                <div class="d-flex align-items-center mb-3">
                    <div class="col-7 p-0">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   @bind-Value="WrongAnswer1"
                                   @oninput="@(e => HandleInputChange(e, nameof(WrongAnswer1)))"
                                   placeholder="תשובה שגויה"
                                   aria-describedby="wrongAnswer1" required />
                    </div>
                    <div class="col-1 p-0">
                        <small id="wrongAnswer1" class="@GetInputClass(WrongAnswer1.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@WrongAnswer1.Length/30</small>
                    </div>
                    <div class="col-1">
                        <span>
                            או
                        </span>
                    </div>
                    @if (Wrong1Image != "")
                    {

                        <div class="col-2">
                            <div class="img-wrapper">
                                <img src="@Wrong1Image" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("Wrong1FileInputID")'></i>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-2">

                            <label class="btn btn-outline-dark btn-sm" for="Wrong1FileInputID">
                                <i class="fa-solid fa-image "></i>
                            </label>
                            <InputFile id="Wrong1FileInputID" OnChange="@(e => UploadFile(e, "Wrong1FileInputID"))" hidden />
                        </div>
                    }
                </div>

                <!-- Wrong Answer 2 -->
                <div class="d-flex align-items-center mb-3">
                    <div class="col-7 p-0">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   @bind-Value="WrongAnswer2"
                                   @oninput="@(e => HandleInputChange(e, nameof(WrongAnswer2)))"
                                   placeholder="תשובה שגויה"
                                   aria-describedby="wrongAnswer2" required />
                    </div>
                    <div class="col-1 p-0">
                        <small id="wrongAnswer2" class="@GetInputClass(WrongAnswer2.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@WrongAnswer2.Length/30</small>
                    </div>
                    <div class="col-1">
                        <span>
                            או
                        </span>
                    </div>
                    @if (Wrong2Image != "")
                    {

                        <div class="col-2">
                            <div class="img-wrapper">
                                <img src="@Wrong2Image" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("Wrong2FileInputID")'></i>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-2">

                            <label class="btn btn-outline-dark btn-sm" for="Wrong2FileInputID">
                                <i class="fa-solid fa-image "></i>
                            </label>
                            <InputFile id="Wrong2FileInputID" OnChange="@(e => UploadFile(e, "Wrong2FileInputID"))" hidden />
                        </div>
                    }
                </div>

                <!-- Wrong Answer 3 -->

                <div class="d-flex align-items-center mb-3">
                    <div class="col-7 p-0">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   @bind-Value="WrongAnswer3"
                                   @oninput="@(e => HandleInputChange(e, nameof(WrongAnswer3)))"
                                   placeholder="תשובה שגויה"
                                   aria-describedby="wrongAnswer3" required />
                    </div>
                    <div class="col-1 p-0">
                        <small id="wrongAnswer3" class="@GetInputClass(WrongAnswer3.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@WrongAnswer3.Length/30</small>
                    </div>
                    <div class="col-1">
                        <span>
                            או
                        </span>
                    </div>
                    @if (Wrong3Image != "")
                    {

                        <div class="col-2">
                            <div class="img-wrapper">
                                <img src="@Wrong3Image" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("Wrong3FileInputID")'></i>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-2">

                            <label class="btn btn-outline-dark btn-sm" for="Wrong3FileInputID">
                                <i class="fa-solid fa-image "></i>
                            </label>
                            <InputFile id="Wrong3FileInputID" OnChange="@(e => UploadFile(e, "Wrong3FileInputID"))" hidden />
                        </div>
                    }
                </div>

                <!-- Submit Button -->
                <div class="mt-3 mb-2">
                    @if (!editAnswer)
                    {
                        <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm">הוספת שאלה</button>
                    }
                    else
                    {
                        <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm me-1">שמירה</button>
                        //cancel button
                        <button type="button" class="btn btn-secondary shadow-sm" @onclick="ClearFormFields">ביטול</button>

                    }
                </div>

            </EditForm>
        </div>

        <!-- Question List Column -->
        @if (questions.Count > 0)
        {
            <div class="col-md-5 mt-4">
                <h5>רשימת שאלות</h5>
                <div class="scrollable-table-body ">
                    <table class="table shadow-sm table-striped table-hover table-responsive border border-1">
                        <thead>
                            <tr>
                                <th>שאלה</th>
                                <th>תמונה</th>
                                <th class="text-center">עריכה</th>
                                <th class="text-center">מחיקה</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var question in questions)
                            {
                                <tr>
                                    <td>@question.QuestionDescription</td>
                                    <td>
                                        @if (question.HasImage)
                                        {
                                            <img src="@question.QuestionImage" height="30" />
                                        }
                                    </td>
                                    <td class="text-center"><button class="btn btn-outline-primary btn-sm" @onclick="()=>EditQuestion(question)">
                                        <i class="fa-solid fa-square-pen fa-fw" style="width: 14px;"></i></button></td>
                                    <td class="text-center">
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => selectedQuestionForDeletion = question"
                                                data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal">
                                            <i class="fa-solid fa-trash fa-fw" style="width: 14px;"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>

    <div class="toast-container position-fixed top-0 end-0 p-3">
        <!--TOAST comes here-->
    </div>


    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">מחיקת משחק</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    מחיקת השאלה תתבצע לצמיתות וללא יכולת שחזור, בטוחים?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDelete">מחיקה</button>
                </div>
            </div>
        </div>
    </div>






    <!-- Modal 1 -->
    <div class="modal fade" id=@($"modal1") tabindex="-1" aria-labelledby=@($"modalLabel1") aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id=@($"modalLabel1")>שבירת בקבוקים</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    בדוכן זה תוכלו לשבור בקבוקים ולזכות בפרסים נחמדים
                </div>
                <div class="text-center p-2">
                    <img src="./assets-images/stageBottles1.png" class="img-fluid rounded mx-auto d-block" alt="Image description">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">הבנתי</button>
                </div>
            </div>
        </div>
    </div>


</div>

@if (msg != "")
{
    <p>@msg</p>
}


@code {
    #region Variables
    [CascadingParameter] public int UserId { get; set; } // Inject UserId

    [Parameter] public string gameCode { get; set; } // Inject gameCode
    [Parameter] public GameDetails game { get; set; }
    [Parameter] public int stage { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnQuestionAdded { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnQuestionDeleted { get; set; }

    private GameDetails gameDetails = new GameDetails();
    private QuestionToAdd questionToAdd = new QuestionToAdd();
    private GameAnswers answersToAdd = new GameAnswers();
    List<GameQuestions> questions = new List<GameQuestions>();

    private QuestionsAndAnswers questionsAndAnswers = new QuestionsAndAnswers();
    private int newQuestionCreated;

    string QuestionDescription = string.Empty;
    string CorrectAnswer = string.Empty;
    string WrongAnswer1 = string.Empty;
    string WrongAnswer2 = string.Empty;
    string WrongAnswer3 = string.Empty;

    int QuestionDescriptionCount => QuestionDescription.Length;
    int CorrectAnswerCount => CorrectAnswer.Length;
    int WrongAnswer1Count => WrongAnswer1.Length;
    int WrongAnswer2Count => WrongAnswer2.Length;
    int WrongAnswer3Count => WrongAnswer3.Length;

    int QuestionDescriptionMaxChars = 50;
    int AnswersDescriptionMaxChars = 30;
    int questionID = 0;

    bool editAnswer = false;
    bool hasimage = false;
    private IBrowserFile questionImageFile;

    private string imagePreview;
    string myFileImage = ""; //Question Image
    string CorrectImage = "";
    string Wrong1Image = "";
    string Wrong2Image = "";
    string Wrong3Image = "";

    long maxFileSize = 4194304; //4MB
    private EditContext editContext;

    string msg = "";
    bool isDeleteModalOpen = false;

    List
    <string> DeleteImages = new List<string>();

    string questionDescriptionClass = "text-muted"; // Default class
    private GameQuestions selectedQuestionForDeletion;

    #endregion

    /*METHODS*/

    protected override async Task OnInitializedAsync()
    {
        questions = game.Questions;
    }

    private void HandleInputChange(ChangeEventArgs e, string inputType)
    {
        var newValue = e.Value.ToString();

        switch (inputType)
        {
            case "QuestionDescription":
                QuestionDescription = newValue;
                break;
            case "CorrectAnswer":
                CorrectAnswer = newValue;
                break;
            case "WrongAnswer1":
                WrongAnswer1 = newValue;
                break;
            case "WrongAnswer2":
                WrongAnswer2 = newValue;
                break;
            case "WrongAnswer3":
                WrongAnswer3 = newValue;
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (!editAnswer)
        {
            if (string.IsNullOrWhiteSpace(CorrectAnswer) || CorrectAnswer.Length < 2 || CorrectAnswer.Length > AnswersDescriptionMaxChars ||
               string.IsNullOrWhiteSpace(WrongAnswer1) || WrongAnswer1.Length < 2 || WrongAnswer1.Length > AnswersDescriptionMaxChars ||
               string.IsNullOrWhiteSpace(WrongAnswer2) || WrongAnswer2.Length < 2 || WrongAnswer2.Length > AnswersDescriptionMaxChars ||
               string.IsNullOrWhiteSpace(WrongAnswer3) || WrongAnswer3.Length < 2 || WrongAnswer3.Length > AnswersDescriptionMaxChars)
            {
                ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                return;
            }



            var newQuestion = await AddQuestion();
            if (newQuestion != null)
            {
                // Check if the new question is already in the list to avoid duplication
                if (!questions.Any(q => q.ID == newQuestion.ID))
                {
                    questions.Add(newQuestion);
                    questions = new List<GameQuestions>(questions); // Re-assign to force UI update
                }
                await AddAnswers(newQuestion.ID);
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");

                StateHasChanged();
                ClearFormFields();
            }
        }
        else
        {

            //Validations
            if (string.IsNullOrWhiteSpace(CorrectAnswer) || CorrectAnswer.Length < 2 || CorrectAnswer.Length > AnswersDescriptionMaxChars ||
               string.IsNullOrWhiteSpace(WrongAnswer1) || WrongAnswer1.Length < 2 || WrongAnswer1.Length > AnswersDescriptionMaxChars ||
               string.IsNullOrWhiteSpace(WrongAnswer2) || WrongAnswer2.Length < 2 || WrongAnswer2.Length > AnswersDescriptionMaxChars ||
               string.IsNullOrWhiteSpace(WrongAnswer3) || WrongAnswer3.Length < 2 || WrongAnswer3.Length > AnswersDescriptionMaxChars)
            {
                ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                return;
            }


            //QUESTION and its image
            if (myFileImage != "")
            {
                hasimage = true;
            }
            QuestionToAdd editedQuestion = new QuestionToAdd()
            {
                GameID = game.ID,
                HasImage = hasimage,
                QuestionDescription = QuestionDescription,
                QuestionImage = myFileImage,
                StageID = 1

            };

            var response = await Http.PutAsJsonAsync($"api/game/{UserId}/updateQuestion/{questionID}", editedQuestion);
            if (response.IsSuccessStatusCode)
            {
                //ANSWERS and their image
                var currentAnswers = questions.Where(q => q.ID == questionID).FirstOrDefault()?.Answers;
                if (currentAnswers != null)
                {
                    Console.WriteLine("Current Correct AnswerImage: " + currentAnswers.ElementAtOrDefault(0).AnswerImage);

                    var updatedAnswers = new List<GameAnswers>
                    {
                        new GameAnswers { ID = currentAnswers.ElementAtOrDefault(0)?.ID ?? 0, AnswerDescription = CorrectAnswer, IsCorrect = true, QuestionID = questionID,
                                                HasImage = !string.IsNullOrEmpty(CorrectImage),
                                                AnswerImage = currentAnswers.ElementAtOrDefault(0)?.HasImage == true ? CorrectImage : "empty"
                                        },

                        new GameAnswers { ID = currentAnswers.ElementAtOrDefault(1)?.ID ?? 0, AnswerDescription = WrongAnswer1, IsCorrect = false, QuestionID = questionID,
                                            HasImage = !string.IsNullOrEmpty(Wrong1Image),

                                            AnswerImage = currentAnswers.ElementAtOrDefault(1)?.HasImage == true ? Wrong1Image : "empty"  },


                        new GameAnswers { ID = currentAnswers.ElementAtOrDefault(2)?.ID ?? 0, AnswerDescription = WrongAnswer2, IsCorrect = false, QuestionID = questionID,
                                            HasImage = !string.IsNullOrEmpty(Wrong2Image),
                                                AnswerImage = currentAnswers.ElementAtOrDefault(2)?.HasImage == true ? Wrong2Image : "empty"  },


                        new GameAnswers { ID = currentAnswers.ElementAtOrDefault(3)?.ID ?? 0, AnswerDescription = WrongAnswer3, IsCorrect = false, QuestionID = questionID,
                                            HasImage = !string.IsNullOrEmpty(Wrong3Image),
                                                AnswerImage = currentAnswers.ElementAtOrDefault(3)?.HasImage == true ? Wrong3Image : "empty"  }

                    };

                    // Update question after successful API response
                    var updatedQuestion = questions.FirstOrDefault(q => q.ID == questionID);
                    if (updatedQuestion != null)
                    {
                        updatedQuestion.QuestionDescription = QuestionDescription;
                        updatedQuestion.QuestionImage = myFileImage; // Update image URL if applicable                                          
                    }

                    // After updating answers in the API
                    foreach (var answer in updatedAnswers)
                    {
                        Console.WriteLine(answer.AnswerImage.ToString());
                        var answerUpdate = await Http.PutAsJsonAsync($"api/game/{UserId}/updateAnswers/{answer.ID}", answer);
                        if (answerUpdate.IsSuccessStatusCode)
                        {
                            // Update local answers
                            var localAnswer = updatedQuestion?.Answers.FirstOrDefault(a => a.ID == answer.ID);
                            if (localAnswer != null)
                            {
                                localAnswer.AnswerDescription = answer.AnswerDescription;
                                localAnswer.HasImage = answer.HasImage;
                                localAnswer.AnswerImage = answer.AnswerImage;
                            }
                        }
                        else
                        {
                            Console.WriteLine("Failed to edit answer: " + await answerUpdate.Content.ReadAsStringAsync());
                        }
                    }
                    // Call StateHasChanged to refresh the UI with updated data
                    StateHasChanged();
                    await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
                    ClearFormFields();
                    editAnswer = false;
                }
            }
            else
            {
                Console.WriteLine("Failed to edit question: " + await response.Content.ReadAsStringAsync());
                await ShowToast(false, "פעולת העריכה נכשלה", "fa-solid fa-circle-exclamation");
            }
        }
    }

    private async Task ShowToast(bool isSuccess, string message, string icon)
    {
        await JS.InvokeVoidAsync("showToast", isSuccess, message, icon);
    }

    void failedSubmit()
    {
        StateHasChanged();
    }

    private async Task<GameQuestions> AddQuestion()
    {
        bool hasImage = !string.IsNullOrEmpty(myFileImage);
        QuestionToAdd questionToAdd = new QuestionToAdd()
            {
                GameID = game.ID,
                HasImage = hasImage,
                QuestionDescription = QuestionDescription,
                QuestionImage = myFileImage,
                StageID = 1,
            };

        var url = $"api/game/{UserId}/addQuestion/{gameCode}";
        var response = await Http.PostAsJsonAsync(url, questionToAdd);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            int questionId = int.Parse(result);
            Console.WriteLine("Successful Question Creation - ID: " + result);
            GameQuestions newQuestion = new GameQuestions
                {
                    ID = questionId,
                    QuestionDescription = QuestionDescription
                };
            await OnQuestionAdded.InvokeAsync(newQuestion);
            return newQuestion;
        }
        else
        {
            Console.WriteLine("Error: " + response.StatusCode);
            return null;
        }
    }

    private async Task<bool> AddAnswers(int questionId)
    {

        //check which answer has image and by that create the new list of answers
        List<GameAnswers> answers = new List<GameAnswers>
        {
            new GameAnswers { AnswerDescription = CorrectAnswer, IsCorrect = true, QuestionID = questionId, HasImage = CorrectImage != "", AnswerImage = CorrectImage },
            new GameAnswers { AnswerDescription = WrongAnswer1, IsCorrect = false, QuestionID = questionId, HasImage = Wrong1Image != "", AnswerImage = Wrong1Image },
            new GameAnswers { AnswerDescription = WrongAnswer2, IsCorrect = false, QuestionID = questionId, HasImage = Wrong2Image != "", AnswerImage = Wrong2Image },
            new GameAnswers { AnswerDescription = WrongAnswer3, IsCorrect = false, QuestionID = questionId, HasImage = Wrong3Image != "", AnswerImage = Wrong3Image }
        };



        var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addAnswers/{questionId}", answers);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Successful Answers Creation");
            return true; // Return true indicating successful creation
        }
        else
        {
            Console.WriteLine("Failed to add answers: " + await response.Content.ReadAsStringAsync());
            return false; // Return false indicating failure to add answers
        }
    }

    private void EditQuestion(GameQuestions question)
    {
        ClearFormFields();
        editAnswer = true;

        if (question.HasImage)
        {
            myFileImage = question.QuestionImage;
        }

        //get question details
        QuestionDescription = question.QuestionDescription;
        questionID = question.ID;


        //get answer details, use arrays to store the answers
        var answers = question.Answers;
        CorrectAnswer = answers.Where(a => a.IsCorrect).FirstOrDefault().AnswerDescription;
        WrongAnswer1 = answers.Where(a => !a.IsCorrect).ElementAt(0).AnswerDescription;
        WrongAnswer2 = answers.Where(a => !a.IsCorrect).ElementAt(1).AnswerDescription;
        WrongAnswer3 = answers.Where(a => !a.IsCorrect).ElementAt(2).AnswerDescription;

        //assign correct image text and hasiamge bool only if hasimage equals to true
        if (answers.Where(a => a.IsCorrect).FirstOrDefault().HasImage)
        {
            CorrectImage = answers.Where(a => a.IsCorrect).FirstOrDefault().AnswerImage;
        }
        if (answers.Where(a => !a.IsCorrect).ElementAt(0).HasImage)
        {
            Wrong1Image = answers.Where(a => !a.IsCorrect).ElementAt(0).AnswerImage;
        }
        if (answers.Where(a => !a.IsCorrect).ElementAt(1).HasImage)
        {
            Wrong2Image = answers.Where(a => !a.IsCorrect).ElementAt(1).AnswerImage;
        }
        if (answers.Where(a => !a.IsCorrect).ElementAt(2).HasImage)
        {
            Wrong3Image = answers.Where(a => !a.IsCorrect).ElementAt(2).AnswerImage;
        }





    }

    async Task ConfirmDelete()
    {
        if (selectedQuestionForDeletion != null)
        {
            await DeleteQuestion(selectedQuestionForDeletion);
            selectedQuestionForDeletion = null; // Reset the selected question
            isDeleteModalOpen = false; // Close the modal
            StateHasChanged(); // Refresh UI
        }
    }

    private async Task DeleteQuestion(GameQuestions question)
    {
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteQuestion/{question.ID}");
        if (response.IsSuccessStatusCode)
        {
            // Remove the question from the local list and update UI
            questions.Remove(question);
            StateHasChanged(); // Call this to refresh the component if not automatically updating
            await ShowToast(true, "השאלה נמחקה בהצלחה.", "fa-solid fa-circle-check");

            await OnQuestionDeleted.InvokeAsync(question);
        }
        else
        {
            ShowToast(false, "פעולת המחיקה נכשלה", "fa-solid fa-circle-exclamation");

            Console.WriteLine("Failed to delete question: " + await response.Content.ReadAsStringAsync());
        }
    }

    private string GetInputClass(int length, int minChars, int maxChars)
    {
        string resultClass;
        if (length == 0)
            resultClass = "text-muted"; // Neutral for zero characters
        else if (length < minChars)
            resultClass = "text-danger";  // Red for less than minimum characters
        else if (length >= minChars && length < maxChars - 3)
            resultClass = "text-good";   // Green for within the normal range
        else if (length >= maxChars - 3 && length <= maxChars)
            resultClass = "text-warning";  // Orange for nearing maximum length
        else
            resultClass = "text-muted";  // Fallback

        return resultClass;
    }

    private async Task UploadFile(InputFileChangeEventArgs e,string inputId)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    switch (inputId)
                    {
                        case "FileInputID":
                            myFileImage = "uploadedFiles/" + resizeUrl;
                            break;
                        case "CorrectFileInputID":
                            CorrectImage = "uploadedFiles/" + resizeUrl;
                            break;
                        case "Wrong1FileInputID":
                            Wrong1Image = "uploadedFiles/" + resizeUrl;
                            break;
                        case "Wrong2FileInputID":
                            Wrong2Image = "uploadedFiles/" + resizeUrl;
                            break;
                        case "Wrong3FileInputID":
                            Wrong3Image = "uploadedFiles/" + resizeUrl;
                            break;
                    }


                }
            }
        }
        Console.WriteLine(CorrectImage.ToString());
    }

    private void MakeDeleteList(string inputId)
    {
        switch (inputId)
        {
            case "FileInputID":
                DeleteImages.Add(myFileImage);
                myFileImage = "";
                break;
            case "CorrectFileInputID":
                DeleteImages.Add(CorrectImage);
                CorrectImage = "";
                break;
            case "Wrong1FileInputID":
                DeleteImages.Add(Wrong1Image);
                Wrong1Image = "";
                break;
            case "Wrong2FileInputID":
                DeleteImages.Add(Wrong2Image);
                Wrong2Image = "";
                break;
            case "Wrong3FileInputID":
                DeleteImages.Add(Wrong3Image);
                Wrong3Image = "";
                break;
        }

    }

    private void ClearFormFields()
    {
        editAnswer = false;
        // Reset properties within the questionsAndAnswers model
        questionsAndAnswers.Questions.QuestionDescription = string.Empty;
        QuestionDescription = "";
        CorrectAnswer = "";
        WrongAnswer1 = "";
        WrongAnswer2 = "";
        WrongAnswer3 = "";
        myFileImage = ""; // Clear any image that might have been uploaded


        CorrectImage = "";
        Wrong1Image = "";
        Wrong2Image = "";
        Wrong3Image = "";



        // This should explicitly set to 'text-muted'
        questionDescriptionClass = GetInputClass(0, 2, QuestionDescriptionMaxChars);

        StateHasChanged();
    }

    private async Task DeleteImage()
    {
        var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeleteImages);
        if (saveResponse.IsSuccessStatusCode == true)
        {
            msg = "deleted Successfully";
            DeleteImages.Clear();
        }
        else
        {
            msg = "DELETE ERROR";
        }
    }
}