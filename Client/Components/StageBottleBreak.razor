
@inject HttpClient Http
@inject NavigationManager Nav
@using template.Shared.Models.Games;
@using template.Shared.Models.Users;


<div class="container-fluid">

    <!-- ROW 1 - TITLE -->
    <div class="row mb-5">
        <div class="col-md-8">
            <h3>דוכן - שבירת בקבוקים</h3>
            <Tooltip Text="הזינו מספר שאלות ועברו לדוכן הבא"><i class="fa fa-info-circle"> </i> </Tooltip>
            <span>משחק חד-ברירה בו שוברים את הבקבוק עם התשובה הנכונה</span>
        </div>
        <div class="col-md-4 text-end">
            <button type="button" class="btn btn-secondary">כיבוי דוכן</button>
        </div>
    </div>

    <!-- ROW 2 - FORM AND QUESTION LIST -->
    <div class="row">
        <!-- Edit Form Column -->
        <div class="col-md-7">
            <h5>שאלה</h5>

            <EditForm Model="questionsAndAnswers" OnValidSubmit="HandleSubmit" OnInvalidSubmit="failedSubmit">
                <DataAnnotationsValidator />

                <!-- ROW - Form Input Fields -->
                <div class="mb-3 d-flex align-items-center">
                    <div class="col-8 p-0">
                        <InputText maxlength="@QuestionDescriptionMaxChars"
                                   pattern="@($"{{2,{QuestionDescriptionMaxChars}}}")"
                                   class="form-control"
                                   id="question"
                                   @bind-Value="QuestionDescription"
                                   @oninput="@(e => HandleInputChange(e, nameof(QuestionDescription)))"
                                   placeholder="שאלה"
                                   aria-describedby="questionDescription" required
                                   title="@($"(טווח תווים 2-{QuestionDescriptionMaxChars})")" />
                        <ValidationMessage For="@(() => questionsAndAnswers.Questions.QuestionDescription)" style="color:Red;" />



                    </div>
                    <div class="col-1 p-0">
                        <small id="questionDescription" class="@GetInputClass(QuestionDescription.Length, 2, @QuestionDescriptionMaxChars) 
                            col-2 p-0 d-flex justify-content-start">@QuestionDescription.Length/@QuestionDescriptionMaxChars</small>
                    </div>
                    <div class="col-2 p-0">
                        <button class="btn btn-outline-secondary">
                            <i class="fa fa-picture-o"></i>
                        </button>
                        <InputFile class="d-none" />
                    </div>
                    @if (questionImageFile != null)
                    {
                        <div class="mb-3 d-flex justify-content-end">
                            <button class="btn btn-danger">הסר תמונה</button>
                        </div>
                        <div class="mb-3">
                            <img src="@imagePreview" class="img-thumbnail" style="max-height: 200px;" alt="Preview" />
                        </div>
                    }
                </div>

                <div class="mb-3 mt-3 col-9"> </div>

                <!-- Row -->
                <div class="row mb-3">
                    <div class="col col-12">
                        <span>תשובות לשאלה</span>
                        <span>(2-30 טווח תווים)</span>
                    </div>
                </div>



                <!-- Correct Answer -->
                <label for="correctAnswer" class="form-label">תשובה נכונה:</label>
                <div class="mb-3 align-items-center">

                    <div class="col-7">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   id="correctAnswer"
                                   @bind-Value="CorrectAnswer"
                                   @oninput="@(e => HandleInputChange(e, nameof(CorrectAnswer)))"
                                   placeholder="תשובה נכונה"
                                   aria-describedby="correctAnswer" required />
                        <ValidationMessage For="@(() => questionsAndAnswers.Answers.AnswerDescription)" style="color:Red;" />
                    </div>
                    <div class="col-3 p-0">
                        <small id="correctAnswer" class="@GetInputClass(CorrectAnswer.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@CorrectAnswer.Length/@AnswersDescriptionMaxChars</small>
                    </div>

                </div>


                <span>תשובות נוספות:</span>

                <!-- Wrong Answer 1 -->
                <div class="d-flex align-items-center mb-3">
                    <div class="col-7 p-0">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   @bind-Value="WrongAnswer1"
                                   @oninput="@(e => HandleInputChange(e, nameof(WrongAnswer1)))"
                                   placeholder="תשובה שגויה" 
                                   aria-describedby="wrongAnswer1" required />
                        <ValidationMessage For="@(() =>  questionsAndAnswers.Answers.AnswerDescription)" style="color:Red;" />
                    </div>
                    <div class="col-3 p-0">
                        <small id="wrongAnswer1" class="@GetInputClass(WrongAnswer1.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@WrongAnswer1.Length/30</small>
                    </div>
                </div>

                <!-- Wrong Answer 2 -->
                <div class="d-flex align-items-center mb-3">
                    <div class="col-7 p-0">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   @bind-Value="WrongAnswer2"
                                   @oninput="@(e => HandleInputChange(e, nameof(WrongAnswer2)))"
                                   placeholder="תשובה שגויה"
                                   aria-describedby="wrongAnswer2" required />
                        <ValidationMessage For="@(() =>  questionsAndAnswers.Answers.AnswerDescription)" style="color:Red;" />
                    </div>
                    <div class="col-3 p-0">
                        <small id="wrongAnswer2" class="@GetInputClass(WrongAnswer2.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@WrongAnswer2.Length/30</small>
                    </div>
                </div>

                <!-- Wrong Answer 3 -->
                <div class="d-flex align-items-center mb-3">
                    <div class="col-7 p-0">
                        <InputText maxlength="@AnswersDescriptionMaxChars"
                                   class="form-control"
                                   @bind-Value="WrongAnswer3"
                                   @oninput="@(e => HandleInputChange(e, nameof(WrongAnswer3)))"
                                   placeholder="תשובה שגויה"
                                   aria-describedby="wrongAnswer3" required />
                        <ValidationMessage For="@(() =>  questionsAndAnswers.Answers.AnswerDescription)" style="color:Red;" />
                    </div>
                    <div class="col-3 p-0">
                        <small id="wrongAnswer3" class="@GetInputClass(WrongAnswer3.Length, 2, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@WrongAnswer3.Length/30</small>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="mt-3 mb-3">
                    <button type="submit" class="btn btn-primary shadow">שמירת שאלה</button>

                </div>

            </EditForm>
        </div>

        <!-- Question List Column -->
        <div class="col-md-5 ">
            <h5>רשימת שאלות</h5>
            <div class="scrollable-table-body ">
                <table class="table shadow-sm table-striped table-hover table-responsive border border-1">
                    <thead>
                        <tr>
                            <th>שאלה</th>
                            <th class="text-center">עריכה</th>
                            <th class="text-center">מחיקה</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var question in questions)
                        {
                            <tr>
                                <td>@question.QuestionDescription</td>
                                <td class="text-center"><button class="btn btn-outline-primary btn-sm" @onclick="()=>EditQuestion(question)"><i class="fa fa-pencil fa-fw" style="width: 14px;"></i></button></td>
                                <td class="text-center"><button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteQuestion(question)"><i class="fa fa-trash-o fa-fw" style="width: 14px;"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@code {
    [CascadingParameter] public int UserId { get; set; } // Inject UserId

    [Parameter] public string gameCode { get; set; } // Inject gameCode
    [Parameter] public GameDetails game { get; set; }
    [Parameter] public int stage { get; set; }

    private GameDetails gameDetails = new GameDetails();
    private QuestionToAdd questionToAdd = new QuestionToAdd();
    private GameAnswers answersToAdd = new GameAnswers();
    List<GameQuestions> questions = new List<GameQuestions>();

    private QuestionsAndAnswers questionsAndAnswers = new QuestionsAndAnswers();
    private int newQuestionCreated;

    string QuestionDescription = string.Empty;
    string CorrectAnswer = string.Empty;
    string WrongAnswer1 = string.Empty;
    string WrongAnswer2 = string.Empty;
    string WrongAnswer3 = string.Empty;

    int QuestionDescriptionCount => QuestionDescription.Length;
    int CorrectAnswerCount => CorrectAnswer.Length;
    int WrongAnswer1Count => WrongAnswer1.Length;
    int WrongAnswer2Count => WrongAnswer2.Length;
    int WrongAnswer3Count => WrongAnswer3.Length;

    int QuestionDescriptionMaxChars = 50;
    int AnswersDescriptionMaxChars = 30;

    private IBrowserFile questionImageFile;
    private string imagePreview;


    /*METHODS*/

    protected override async Task OnInitializedAsync()
    {
        questions = game.Questions;
    }

    private void HandleInputChange(ChangeEventArgs e, string inputType)
    {
        var newValue = e.Value.ToString();
        switch (inputType)
        {
            case "QuestionDescription":
                QuestionDescription = newValue;
                break;
            case "CorrectAnswer":
                CorrectAnswer = newValue;
                break;
            case "WrongAnswer1":
                WrongAnswer1 = newValue;
                break;
            case "WrongAnswer2":
                WrongAnswer2 = newValue;
                break;
            case "WrongAnswer3":
                WrongAnswer3 = newValue;
                break;
            default:
                break;
        }

    }
    
    private async Task HandleSubmit()
    {
        await AddQuestion();
        if (newQuestionCreated > 0)
        {
            await AddAnswers();
        }
    }

    void failedSubmit()
    {
        Console.WriteLine("Form submission failed");
    }

    private async Task AddQuestion()
    {
        QuestionToAdd questionToAdd = new QuestionToAdd()
            {
                GameID = game.ID,
                HasImage = false,
                QuestionDescription = QuestionDescription,
                QuestionImage = "empty",
                StageID = 1,
            };

        var url = $"api/game/{UserId}/addQuestion/{gameCode}";
        var response = await Http.PostAsJsonAsync(url, questionToAdd);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            newQuestionCreated = int.Parse(result);
            Console.WriteLine("Successful Question Creation - ID: " + result); // Handle success
        }
        else
        {
            Console.WriteLine("Error: " + response.StatusCode); // Handle error
        }
    }

    private async Task AddAnswers()
    {
        List<GameAnswers> answers = new List<GameAnswers>()
    {
        new GameAnswers { AnswerDescription = CorrectAnswer, IsCorrect = true, QuestionID = newQuestionCreated },
        new GameAnswers { AnswerDescription = WrongAnswer1, IsCorrect = false, QuestionID = newQuestionCreated },
        new GameAnswers { AnswerDescription = WrongAnswer2, IsCorrect = false, QuestionID = newQuestionCreated },
        new GameAnswers { AnswerDescription = WrongAnswer3, IsCorrect = false, QuestionID = newQuestionCreated }
    };

        var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addAnswers/{newQuestionCreated}", answers);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Successful Answers Creation");
        }
        else
        {
            Console.WriteLine("Failed to add answers: " + await response.Content.ReadAsStringAsync());
        }
    }

    private void EditQuestion(GameQuestions question)
    {
        // Implementation for editing a question
        Nav.NavigateTo($"/edit-question/{question.ID}");
    }

    private async Task DeleteQuestion(GameQuestions question)
    {
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteQuestion/{question.ID}");
        if (response.IsSuccessStatusCode)
        {
            questions.Remove(question); // Update UI upon successful deletion
        }
    }

    private string GetInputClass(int length, int minChars, int maxChars)
    {
        if (length == 0)
            return "text-muted"; // Neutral for zero characters
        else if (length < minChars)
            return "text-danger";  // Red for less than minimum characters
        else if (length >= minChars && length <= maxChars - 3)
            return "text-good";   // Green for within the normal range
        else if (length > maxChars - 3 && length <= maxChars)
            return "text-warning";  // Orange for nearing maximum length
        return "text-muted";  // Fallback, might not be necessary
    }
}