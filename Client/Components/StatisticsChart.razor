@using template.Shared.Models.Games
@inject IJSRuntime JSRuntime;

<canvas id="@ChartId" width="400" height="200"></canvas>

@code {
    [Parameter]
    public List<StatisticsStages> StageStatistics { get; set; }

    [Parameter]
    public string ChartId { get; set; }

    [Parameter]
    public string ChartLabel { get; set; }

    [Parameter]
    public double? YAxisMax { get; set; }

    [Parameter]
    public Dictionary<int, string> StageNames { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderChart();
        }
    }

    private async Task RenderChart()
    {
        var groupedStats = StageStatistics.GroupBy(s => s.StageID)
                                          .Select(g => new
                                          {
                                              StageID = g.Key,
                                              AverageGrade = g.Average(s => ConvertGradeToDouble(s.StageGrade)),
                                              AverageTime = g.Average(s => ConvertTimeToMinutes(s.StageTime)) // Convert time to minutes
                                          })
                                          .ToList();

        var dataLabels = groupedStats.Select(g => StageNames.ContainsKey(g.StageID) ? StageNames[g.StageID] : g.StageID.ToString()).ToArray();
        var dataValues = ChartLabel.Contains("זמנים") ? groupedStats.Select(g => g.AverageTime).ToArray() : groupedStats.Select(g => g.AverageGrade).ToArray();
        var backgroundColors = GetConstantColors(groupedStats.Count); // Use a method to get constant colors

        await JSRuntime.InvokeVoidAsync("renderBarChart", ChartId, dataLabels, dataValues, backgroundColors, ChartLabel, YAxisMax);
    }

    private double ConvertGradeToDouble(string grade)
    {
        if (double.TryParse(grade, out double result))
        {
            return result;
        }
        return 0;
    }

    private double ConvertTimeToMinutes(string time)
    {
        var parts = time.Split(':');
        if (parts.Length == 2 && int.TryParse(parts[0], out int minutes) && int.TryParse(parts[1], out int seconds))
        {
            return minutes + (seconds / 60.0);
        }
        return 0;
    }

    private string[] GetConstantColors(int count)
    {
        // Example constant colors (adjust as needed)
        string[] colors = new string[]
        {
            "rgba(255, 99, 132, 0.2)", // Red
            "rgba(54, 162, 235, 0.2)", // Blue
            "rgba(255, 206, 86, 0.2)", // Yellow
            "rgba(75, 192, 192, 0.2)", // Green
            "rgba(153, 102, 255, 0.2)" // Purple
        };

        // Ensure enough colors for the number of data points
        return colors.Take(count).ToArray();
    }
}
