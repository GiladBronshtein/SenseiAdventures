@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav
@using System.Text.Json
@using System.Text
@using template.Shared.Models.Games;
@using template.Shared.Models.Users;
@using template.Shared.Models.GPT;
@using System.Text.RegularExpressions;


<div class="container-fluid">

    <!-- ROW 1 - TITLE -->
    <div class="row mb-4">
        <div class="col-md-7">
            <h3>
                דוכן חותכים תשובות
                
                <button type="button" class="btn bg-primary-subtle" data-bs-toggle="modal" data-bs-target=@($"#modal1")
                        style=" --bs-btn-padding-y: .25rem;  --bs-btn-padding-x: .5rem;  --bs-btn-font-size: .75rem;">
                    הסבר
                    <i class="fa fa-info-circle p-1" style="color:black;"></i>
                </button>

                 @if (questionID > 0)
                    {  
                    <!--spacing between two buttons-->
                    <span class="me-1"></span>
                    <button type="button" class="btn bg-success-subtle" data-bs-toggle="modal" data-bs-target=@($"#gpt")
                        style=" --bs-btn-padding-y: .25rem;  --bs-btn-padding-x: .5rem;  --bs-btn-font-size: .75rem;">
                    מחולל שאלות
                    <i class="fa-solid fa-robot p-1" style="color:black;"></i>
                    </button>

                     }                 
            </h3>
        </div>

        <div class="col-md-5 text-end">
            @if(isLoading)
            {
                <div class="spinner-border text-dark" role="status">
                    <span class="visually-hidden">טוען...</span>
                </div>
            }
            else
            {
                @foreach (var question in game.Questions)
                {
                    <button type="button" class="btn btn-secondary me-1" @onclick="() => selectedQuestionForDeletion = question"
                            data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal">
                        מחיקת דוכן
                    </button>
                }
                @if (isLoading)
                {
                    @*SHOW NOTHING*@
                }
                else
                {
                    if (game.Questions.Count > 0)
                    {
                        <button type="button" class="@toggleButtonClass" data-bs-toggle="modal" data-bs-target="#toggleModal">@toggleButtonText</button>
                    }
                }
            }
           
        </div>
    </div>

    <!-- ROW 2 - FORM AND QUESTION LIST -->
    <div class="row">
        <!-- Edit Form Column -->
        <div class="col-md-7 ">
            <div class="row mb-3">
                <div class="col-12">
                    <span> שאלה</span>
                    <span>(2-30 טווח תווים)</span>
                </div>
            </div>

            <EditForm Model="questionsAndAnswers" OnValidSubmit="HandleQuestionSubmit" OnInvalidSubmit="failedSubmit">
                <DataAnnotationsValidator />

                <!-- ROW - Form Input Fields -->
                <div class="mb-3 d-flex align-items-center">
                    <div class="col-7 p-0">
                        <InputText maxlength="@QuestionDescriptionMaxChars"
                                   class="form-control"
                                   id="question"
                                   @bind-Value="QuestionDescription"
                                   @oninput="@(e => HandleInputChange(e, nameof(questionsAndAnswers.Questions.QuestionDescription)))"
                                   placeholder="טקסט השאלה"
                                   aria-describedby="questionDescription" required />
                    </div>

                    <div class="col-2 pe-2">
                        <small id="questionDescription" class="@GetInputClass(QuestionDescription?.Length ?? 0, 2, @QuestionDescriptionMaxChars)">
                            @(QuestionDescription?.Length ?? 0)/@QuestionDescriptionMaxChars
                        </small>

                    </div>



                    <div class="col-2 ps-1">

                        @if (myFileImage != "")
                        {
                            <div class="img-wrapper">
                                <img src="@myFileImage" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("FileInputID")'></i>
                            </div>
                        }
                        else
                        {
                            <div class="col-2 ps-1">
                                <label class="" for="FileInputID">
                                    <i class="fa-solid fa-image image-upload-icon"></i>
                                </label>
                                <InputFile id="FileInputID" OnChange="@(e => UploadFile(e, "FileInputID"))" hidden />
                            </div>
                        }
                    </div>

                </div>

                    @if (isLoading)
                    {
                        <div class="spinner-border text-dark" role="status">
                            <span class="visually-hidden">Loading...</span>
                    </div>
                    }
                    else
                    {
                        <div class="mb-5 mt-3 col-9">
                            <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm me-1">שמירת שאלה</button>
                        </div>
                    }
               
            </EditForm>

            <EditForm Model="questionsAndAnswers" OnValidSubmit="HandleAnswerSubmit" OnInvalidSubmit="failedSubmit">
                <DataAnnotationsValidator />
                @if (game.Questions.Count > 0)
                {

                    <!-- Correct Answer -->
                    <label for="correctAnswer" class="form-label mt-3">תשובה</label>
                    <div class="mb-3 align-items-center">
                        <div class="col-7">
                            <InputText maxlength="@AnswersDescriptionMaxChars"
                                       class="form-control"
                                       id="correctAnswer"
                                       @bind-Value="CorrectAnswer"
                                       @oninput="@(e => HandleInputChange(e, nameof(CorrectAnswer)))"
                                       placeholder="טקסט לתשובה"
                                       aria-describedby="correctAnswer"
                                       disabled="@(!string.IsNullOrWhiteSpace(CorrectImage) && CorrectImage != "empty")"
                                       required />
                        </div>
                        <div class="col-1 p-0">
                            <small id="correctAnswer" class="@GetInputClass(CorrectAnswer.Length, 1, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@CorrectAnswer.Length/@AnswersDescriptionMaxChars</small>
                        </div>

                        <div class="col-1 position-relative" style="padding-top: .5rem; height: 38px;">

                            <!-- Custom Icon Toggle -->
                            <div class="form-check form-switch">
                                <input class="form-check-input custom-icon-toggle" type="checkbox" id="iconToggle" disabled
                                       checked="@(!string.IsNullOrWhiteSpace(CorrectImage) && CorrectImage != "empty")">
                                <label class="form-check-label" for="iconToggle"></label>
                            </div>
                        </div>


                        @if (!string.IsNullOrWhiteSpace(CorrectImage) && CorrectImage != "empty")
                        {
                            <div class="col-2">
                                <div class="img-wrapper">
                                    <img src="@CorrectImage" class="QuestionImage" width="30" />
                                    <i class="fa-solid fa-trash delete-image-btn" @onclick='() => MakeDeleteList("CorrectFileInputID")'></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-2">
                                <label class="" for="CorrectFileInputID">
                                    <i class="fa-solid fa-image image-upload-icon"></i>
                                </label>
                                <InputFile id="CorrectFileInputID" OnChange="@(e => UploadFile(e, "CorrectFileInputID"))" hidden />
                            </div>
                        }
                    </div>

                    <!-- Answer Type Selection -->
                    <div class="d-flex align-items-center mb-5">
                        <span> בחרו: </span>
                        <div class="checkbox-wrapper-26 ms-3 me-3">
                            <input type="checkbox" id="correctAnswerToggle" @bind="IsCorrect" />
                            <label for="correctAnswerToggle">
                                <div class="tick_mark"></div>
                            </label>
                        </div>
                        <span class="answer-text">@((IsCorrect) ? "נכון" : "לא נכון")</span>
                    </div>

                    <!-- Submit ANSWER Button -->
                    <div class="mt-3 mb-2">
                        @if (!editAnswer)
                        {
                            @if (isLoading)
                            {
                                <div class="spinner-border text-dark" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm">הוספת תשובה</button>

                            }
                        }
                        else
                        {
                            //Save button
                            <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm me-1">שמירה</button>
                            //Cancel button
                            <button type="button" class="btn btn-secondary shadow-sm" @onclick="ClearFormFields">ביטול</button>
                        }
                    </div>
                }

            </EditForm>
        </div>

        <!--QUESTIONS LIST -->
        @if (countAnswers > 0)
        {

            <div class="col-md-5 mt-4">
                <h5>רשימת תשובות</h5>
                <div class="scrollable-table-body">
                    <table class="table shadow-sm table-responsive border border-2">
                        <thead>
                            <tr>
                                <th class="col-md-6">מסיח</th>
                                <th class="col-md-2">תמונה</th>
                                <th class="col-md-2 text-center">עריכה</th>
                                <th class="col-md-2 text-center">מחיקה</th>
                            </tr>
                        </thead>

                        <tbody>
                            @if (isLoading)
                            {
                                <tr>
                                    <td colspan="4" class="text-center">
                                        <div class="spinner-border text-dark" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var question in game.Questions)
                                {
                                    foreach (var answer in question.Answers)
                                    {

                                        <tr class="@(answer.IsCorrect ? "table-success" : "table-danger")">
                                            <td class="truncate-text" data-length="20">@answer.AnswerDescription</td>
                                            <td>
                                                @if (answer.HasImage)
                                                {
                                                    <img src="@answer.AnswerImage" height="26" />
                                                }
                                            </td>

                                            <td class="text-center">
                                                <button class="btn btn-outline-primary btn-sm" @onclick="()=>EditAnswer(answer)">
                                                    <i class="fa-solid fa-square-pen fa-fw" style="width: 14px;"></i>
                                                </button>
                                            </td>

                                            <td class="text-center">
                                                <button class="btn btn-outline-danger btn-sm" @onclick="() => selectedAnswerForDelete = answer"
                                                        data-bs-toggle="modal" data-bs-target="#deleteAnswerConfirmationModal">
                                                    <i class="fa-solid fa-trash fa-fw" style="width: 14px;"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }

                                }
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        }

    </div>

    <!-- TOAST -->
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <!--TOAST comes here-->
    </div>

    <!-- Delete QUESTION Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">מחיקת משחק</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    מחיקת השאלה תתבצע לצמיתות וללא יכולת שחזור, בטוחים?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDelete">מחיקה</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete ANSWER Confirmation Modal -->
    <div class="modal fade" id="deleteAnswerConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">מחיקת מסיח</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    מחיקת המסיח תתבצע לצמיתות וללא יכולת שחזור, בטוחים?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDeleteAnswer">מחיקה</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal 1 -->
    <div class="modal fade" id=@($"modal1") tabindex="-1" aria-labelledby=@($"modalLabel1") aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id=@($"modalLabel1")>
                        חותכים תשובות
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>

                            מנגנון משחק – זיהוי תשובות נכונות
                    </p>
                    <i class="fa-regular fa-lightbulb" style="color:darkblue ;"></i>

                    במשחק זה יש לחתוך את התשובות הנכונות והתעלם מהלא נכונות
                    <p>
                        <i class="fa-regular fa-lightbulb" style="color:darkblue ;"></i>

                        <b>הנחיות עריכה - </b>
                        הוסיפו שאלה אחת בלבד ומסיחים רבים לפי הצורך, הגדירו אילו מסיחים נכונים ואילו לא.
                    </p>
                   
                </div>
                <div class="text-center p-2">
                    <img src="./assets-images/stageSlash4.png" class="img-fluid rounded mx-auto d-block" alt="Image description">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">הבנתי</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toggle Confirmation Modal -->
    <div class="modal fade" id="toggleModal" tabindex="-1" aria-labelledby="toggleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="toggleModalLabel">@modalTitle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @modalMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="ToggleStage">אישור</button>
                </div>
            </div>
        </div>
    </div>

    <!-- GPT MODAL -->
    <div class="modal fade modal-lg" id=@($"gpt") tabindex="-1" aria-labelledby=@($"gptLabel") aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id=@($"gptLabel")>מחולל שאלות בעזרת ChatGPT</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ClearEntireForm"></button>

                </div>
                <div class="modal-body">
                    <div class="accordion accordion-flush" id="accordionExample">
                        <!-- First Accordion Item -->
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                    <i class="fa-regular fa-lightbulb ps-2 pe-3" style="color:darkblue;"></i><b>שאלות חד-ברירה חיוביות</b>
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                                <div class="accordion-body">



                                    שאלות מסוג חד-ברירה חיוביות הן כלי נפוץ לבחינה ומאפשרות לבדוק הבנה וידע.
                                    הן כוללות שאלה ומספר אפשרויות תשובה, כאשר רק אחת מהן נכונה.
                                    שאלות אלו בוחנות בעיקר יכולת לזהות תשובה נכונה ויכולת להבין ולהיזכר במידע ספציפי.
                                    הן יעילות בזמן, נגישות, ומאפשרות בדיקה מדויקת של ידע בנושאים שונים.
                                </div>
                            </div>
                        </div>
                        <!-- Second Accordion Item -->
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingTwo">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                    <i class="fa-regular fa-lightbulb ps-2 pe-3" style="color:darkblue;"></i><b>הוראות למחולל GPT</b>
                                </button>
                            </h2>
                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <ul>
                                        <li>
                                            העלו קובץ או ספקו לינק לויקיפדיה עם מידע עליו תרצו לבסס את השאלות שיווצרו על ידי ChatGPT.
                                        </li>
                                        <li>
                                            תארו בכמה מילים את הנושא, בחרו את קהל היעד וכמות השאלות ליצירה.
                                        </li>
                                        <li>
                                            שימו לב - ניתן לייצר עד 15 שאלות בכל פעם.
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-7 d-flex flex-column mt-3">
                            <EditForm Model="GenerateQuestions" class="flex-grow-1" OnValidSubmit="HandleGPTSubmit" OnInvalidSubmit="failedSubmit">
                                <DataAnnotationsValidator />
                                <!--FILE UPLOAD DOC / DOCX / PDF-->
                                <div class="row mb-3">
                                    <div class="col-3">
                                        <label for="formFile" class="form-label">העלאת קובץ</label>
                                    </div>
                                    <div class="col-6">
                                        <InputFile class="form-control" id="formFile" accept=".doc,.docx,.pdf"
                                                   OnChange="HandleFileUpload"
                                                   @attributes="@(new Dictionary<string, object> { { "disabled", !string.IsNullOrEmpty(GenerateQuestions.wikipediaLink) } })" />
                                    </div>
                                    <div class="col-1">
                                        <button type="button" class="btn btn-outline-secondary" @onclick="ClearFileInput">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                </div>

                                <!--WIKIPEDIA LINK-->
                                <div class="row mb-3">
                                    <div class="col-3">
                                        <label for="wikipedia" class="form-label">דף ויקיפדיה</label>
                                    </div>
                                    <div class="col-6">
                                        <InputText class="form-control" placeholder="https://he.wikipedia.org" id="wikipedia" @bind-Value="GenerateQuestions.wikipediaLink"
                                                   @attributes="@(new Dictionary<string, object> { { "disabled", !string.IsNullOrEmpty(GenerateQuestions.fileBase64) } })" />
                                    </div>
                                    <div class="col-1">
                                        <button type="button" class="btn btn-outline-secondary" @onclick="ClearWikipediaLink">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                </div>

                                <!--Description-->
                                <div class="row mb-3">
                                    <div class="col-3">
                                        <label for="description" class="form-label">תיאור</label>
                                    </div>
                                    <div class="col-6">
                                        <InputText @bind-Value="QuestionDescription" class="form-control" id="description" readonly disabled required />
                                    </div>
                                    <div class="col-1">
                                      
                                    </div>
                                </div>

                                <!--Audience-->
                                <div class="row mb-3">
                                    <div class="col-3">
                                        <label for="audience" class="form-label">  קהל היעד</label>
                                    </div>
                                    <div class="col-4">
                                        <InputSelect @bind-Value="GenerateQuestions.audienceDescription" class="form-select" id="audience" required>
                                            <option>בחרו</option>
                                            <option value="kids">ילדים</option>
                                            <option value="teenagers">נערים</option>
                                            <option value="grownups">בוגרים</option>
                                            <option value="adults">מבוגרים</option>
                                        </InputSelect>
                                    </div>
                                </div>

                                <!--Count questions-->
                                <div class="row mb-3">
                                    <div class="col-3">
                                        <label for="countQuestions" class="form-label">כמות שאלות</label>
                                    </div>
                                    <div class="col-4">
                                        <InputNumber @bind-Value="@GenerateQuestions.countQuestions"
                                                     class="form-control"
                                                     min="1"
                                                     max="30"
                                                     step="1"
                                                     id="countQuestions" required />
                                    </div>
                                </div>

                                <!--submit-->
                                <div class="row mb-3">
                                    <div class="col-3">
                                    </div>
                                    <div class="col-4">
                                        @if (!isModalLoading)
                                        {
                                            <button type="submit" class="btn btn-primary" style="width:100%;"> חוֹלֵל שאלות  </button>
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn btn-primary" style="width:100%;" disabled>  חוֹלֵל שאלות </button>
                                        }
                                    </div>
                                </div>
                            </EditForm>
                            <!--error div-->
                            @if (!string.IsNullOrEmpty(ErrorMessage))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @ErrorMessage
                                </div>
                            }
                        </div>

                        <div class="col-md-5 d-flex flex-column align-items-start mt-3">


                            <div class="position-relative flex-grow-1 w-100">
                                <textarea class="form-control h-100" placeholder="תוצאות המחולל יופיעו כאן" id="formControlTextarea" readonly>@FormattedContent</textarea>
                                @if (isModalLoading)
                                {
                                    <div class="position-absolute top-50 start-50 translate-middle">
                                        <div class="spinner-border text-dark" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!--Warning-->
                    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
                        <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
                            <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                        </symbol>
                    </svg>
                    <div class="alert alert-warning d-flex align-items-center p-2 mt-4" role="alert" style="display: flex; justify-content: center; align-items: center; white-space: nowrap;">
                        <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Warning:" style="width: 16px; height: 16px;">
                            <use xlink:href="#exclamation-triangle-fill" />
                        </svg>
                        <div>
                            ChatGPT יכול לעשות טעויות. אנא ודאו מידע חשוב.
                        </div>
                    </div>
                </div>

                <div class="modal-footer">

                    <!--IF Textarea contains text add button will be available, else disabled -->
                    @if (!string.IsNullOrEmpty(FormattedContent))
                    {
                        <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="AddQuestionsFromGPT">הוספת השאלות לדוכן</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-success" data-bs-dismiss="modal" disabled>הוספת השאלות לדוכן</button>
                    }

                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="ClearEntireForm">ביטול</button>
                </div>
            </div>
        </div>
    </div>

</div>

@if (msg != "")
{
    <p>@msg</p>
}




@code {
    [CascadingParameter] public int UserId { get; set; }
    [Parameter] public string gameCode { get; set; }
    [Parameter] public GameDetails game { get; set; }
    [Parameter] public int stage { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnQuestionAdded { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnQuestionDeleted { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnStageStatusChange { get; set; }

    [Parameter] public bool isLoading { get; set; }  // State variable to track loading status

    private QuestionToAdd questionToAdd = new QuestionToAdd();
    private GameAnswers answersToAdd = new GameAnswers();
    private QuestionsAndAnswers questionsAndAnswers = new QuestionsAndAnswers();

    string QuestionDescription = string.Empty;
    string CorrectAnswer = string.Empty;


    bool IsCorrect = true; // Default to true for correct answer

    int QuestionDescriptionCount => QuestionDescription.Length;
    int CorrectAnswerCount => CorrectAnswer.Length;

    int QuestionDescriptionMaxChars = 50;
    int AnswersDescriptionMaxChars = 20;
    int questionID = 0;
    int answerID = 0;

    int countAnswers = 0;

    bool editAnswer = false;
    bool hasimage = false;
    private IBrowserFile questionImageFile;

    private string imagePreview;
    string myFileImage = "";
    string CorrectImage = "empty";


    long maxFileSize = 4194304;
    private EditContext editContext;

    string msg = "";
    bool isDeleteModalOpen = false;

    List<string> DeleteImages = new List<string>();

    string questionDescriptionClass = "text-muted"; // Default class
    private GameQuestions selectedQuestionForDeletion;
    private GameAnswers selectedAnswerForDelete;


    private bool isStageActive = true;
    private string toggleButtonText => isStageActive ? "כיבוי דוכן" : "הפעלת דוכן";
    private string toggleButtonClass => isStageActive ? "btn btn-secondary" : "btn btn-primary";
    private string modalTitle => isStageActive ? "כיבוי דוכן" : "הפעלת דוכן";
    private string modalMessage => isStageActive ? "האם לכבות את הדוכן? עדיין תוכלו לערוך אך שאלות בדוכן זה לא יהיו פעילות ולא ייחשבו בעת פרסום" : "האם להפעיל את הדוכן?";


    /*GPT METHODS & VARS*/

    [Parameter] public bool isModalLoading { get; set; }  // State variable to track loading status
    private QuestionsFromGPT GenerateQuestions = new QuestionsFromGPT();
    private string FileContent { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string FormattedContent { get; set; } = string.Empty;
    private string uploadedFileContent { get; set; } = string.Empty;
    private string fileInputKey = Guid.NewGuid().ToString();


    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                // Check file size (10 MB limit)
                if (file.Size > 10 * 1024 * 1024)
                {
                    ErrorMessage = "File is too large. Maximum size is 10 MB.";
                    return;
                }

                // Read the file content
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                // Create the content to send to the API
                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(memoryStream), "file", file.Name);

                // Send the file to the server
                var response = await Http.PostAsync("api/Document/upload", content);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<JsonDocument>();
                    if (result != null && result.RootElement.TryGetProperty("content", out JsonElement contentElement))
                    {
                        uploadedFileContent = contentElement.GetString(); // Store the uploaded file content
                        FileContent = uploadedFileContent;

                        // Log to verify the information content
                        // Console.WriteLine($"File upload successful. Information: {uploadedFileContent}");

                        ErrorMessage = null; // Clear any previous error message
                    }
                    else
                    {
                        ErrorMessage = "File upload succeeded but no content was returned.";
                        Console.WriteLine("File upload succeeded but no content was returned.");
                    }
                }
                else
                {
                    ErrorMessage = $"File upload failed: {await response.Content.ReadAsStringAsync()}";
                    Console.WriteLine($"File upload failed: {await response.Content.ReadAsStringAsync()}");
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private string _fetchedWikipediaContent; // Field to store fetched Wikipedia content

    private async Task HandleGPTSubmit()
    {
        Console.WriteLine("Started Handling GPT Submit");
        isModalLoading = true;

        try
        {
            string contentToFetch = GenerateQuestions.wikipediaLink;

            // Handle case where no Wikipedia link is provided
            if (string.IsNullOrEmpty(contentToFetch))
            {
                // Use content from uploaded file
                if (!string.IsNullOrEmpty(uploadedFileContent))
                {
                    GenerateQuestions.information = uploadedFileContent;
                }
                else
                {
                    await ShowToast(false, "הוסיפו תוכן או לינק לויקיפדיה.", "fa-solid fa-circle-exclamation");
                    isModalLoading = false;
                    return;
                }
            }
            else
            {
                // Wikipedia link is provided, fetch content if not already fetched
                if (Uri.TryCreate(contentToFetch, UriKind.Absolute, out Uri? uri) &&
                    (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps))
                {
                    if (_fetchedWikipediaContent == null)
                    {
                        var response = await Http.GetAsync($"api/Document/GetWikipediaContent?wikipediaLink={Uri.EscapeUriString(contentToFetch)}");

                        if (response.IsSuccessStatusCode)
                        {
                            _fetchedWikipediaContent = await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            await ShowToast(false, "אנא ודאו שימוש בקישור תקין לויקיפדיה.", "fa-solid fa-circle-exclamation");
                            isModalLoading = false;
                            return; // Exit method if fetch fails
                        }
                    }

                    // Use the fetched Wikipedia content for generating questions
                    GenerateQuestions.information = _fetchedWikipediaContent;
                }
                else
                {
                    await ShowToast(false, "אנא ודאו שימוש בקישור תקין לויקיפדיה.", "fa-solid fa-circle-exclamation");
                    isModalLoading = false;
                    return; // Exit method if link is invalid
                }
            }

            // Assign QuestionDescription to the description of the question
            GenerateQuestions.description = QuestionDescription;

            // Log to verify information content
            Console.WriteLine($"Description is:  {GenerateQuestions.description}");
            Console.WriteLine($"Audience is:  {GenerateQuestions.audienceDescription}");
            Console.WriteLine($"Count Questions is:  {GenerateQuestions.countQuestions}");

            var gptResponse = await Http.PostAsJsonAsync("api/GPT/GPTChatStage4", GenerateQuestions);

            if (gptResponse.IsSuccessStatusCode)
            {
                var result = await gptResponse.Content.ReadAsStringAsync();
                FileContent = result; // Store the raw JSON response
                FormattedContent = FormatJsonToPlainText(result); // Format the content for textarea
                ErrorMessage = null; // Clear any previous error message              
            }
            else
            {
                ErrorMessage = "Error generating questions";
                await ShowToast(false, "Error generating questions", "fa-solid fa-circle-times");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"An error occurred: {ex.Message}");
            await ShowToast(false, "Error", "fa-solid fa-circle-times");
        }
        finally
        {
            isModalLoading = false;
        }
    }

    private string FormatJsonToPlainText(string jsonContent)
    {
        var formattedText = new StringBuilder();

        try
        {
            var jsonData = JsonDocument.Parse(jsonContent);
            var answers = jsonData.RootElement.GetProperty("answers");

            foreach (var answer in answers.EnumerateArray())
            {
                var answerText = answer.GetProperty("answer").GetString();
                var correct = answer.GetProperty("correct").GetBoolean();

                if (correct)
                {
                    formattedText.AppendLine($"- {answerText} (Correct Answer)");
                }
                else
                {
                    formattedText.AppendLine($"- {answerText}");
                }
            }
        }
        catch (Exception ex)
        {
            formattedText.AppendLine("Error parsing JSON content.");
            formattedText.AppendLine(ex.Message); // Optionally append the specific error message
        }

        return formattedText.ToString();
    }

    private async Task AddQuestionsFromGPT()
    {
        isLoading = true;

        try
        {
            // Deserialize the JSON content into C# objects
            var generatedAnswers = JsonSerializer.Deserialize<GeneratedAnswers>(FileContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true // Handle case insensitivity if needed
                });

            if (generatedAnswers != null && generatedAnswers.Answers.Any())
            {
                // Assuming you already have the questionId from adding the question
                int questionId = questionID; // Replace with actual ID retrieval logic

                // Call method to add all generated answers
                bool answersAdded = await AddGeneratedAnswers(questionId, generatedAnswers.Answers);

                if (answersAdded)
                {
                    await ShowToast(true, "Answers added successfully!", "fa-solid fa-circle-check");
                    ClearFormFields();
                    ClearEntireForm();
                    StateHasChanged();

                }
                else
                {
                    await ShowToast(false, "Failed to add answers", "fa-solid fa-circle-times");
                }
            }
            else
            {
                ErrorMessage = "No answers generated by ChatGPT.";
                await ShowToast(false, "No answers generated", "fa-solid fa-circle-times");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error handling generated answers: " + ex.Message;
            await ShowToast(false, "Error", "fa-solid fa-circle-times");
        }
        finally
        {
            isLoading = false;
            ClearFormFields();
            ClearEntireForm();
            StateHasChanged();
            await RefreshGameDetailsForGPT(); // Refresh game details if needed

        }
    }

    private async Task<bool> AddGeneratedAnswers(int questionId, List<GeneratedAnswer> generatedAnswers)
    {
        try
        {
            // Prepare a list of GameAnswers to send to the API endpoint
            List<GameAnswers> gameAnswers = generatedAnswers.Select(answer => new GameAnswers
                {
                    AnswerDescription = answer.Answer,
                    IsCorrect = answer.Correct,
                    HasImage = false, // Assuming no image for answers from GPT
                    AnswerImage = "empty", // Assuming no image for answers from GPT
                    QuestionID = questionId
                }).ToList();

            // Post the gameAnswers list to your API endpoint
            var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addAnswers/{questionId}", gameAnswers);

            if (response.IsSuccessStatusCode)
            {
                return true; // Return true indicating successful creation
            }
            else
            {
                Console.WriteLine("Failed to add answers: " + await response.Content.ReadAsStringAsync());
                return false; // Return false indicating failure to add answers
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception adding answers: " + ex.Message);
            return false; // Return false on any exception
        }
    }

    private async Task ClearFileInput()
    {
        GenerateQuestions.fileBase64 = string.Empty;
        await JS.InvokeVoidAsync("clearFileInput", "formFile");

    }

    private void ClearWikipediaLink()
    {
        GenerateQuestions.wikipediaLink = string.Empty;
    }

    private void ClearDescription()
    {
        GenerateQuestions.description = string.Empty;
    }

    private void ClearEntireForm()
    {
        GenerateQuestions = new QuestionsFromGPT();
        uploadedFileContent = string.Empty;
        FileContent = string.Empty;
        FormattedContent = string.Empty;
        ErrorMessage = string.Empty;
        _fetchedWikipediaContent = string.Empty;
        isModalLoading = false;
    }

    private async Task RefreshGameDetailsForGPT()
    {
        Console.WriteLine("Loading Stage ID: " + stage.ToString());
        var response = await Http.GetFromJsonAsync<GameDetails>($"api/game/{UserId}/getGame/{gameCode}");
        if (response != null)
        {
            // Taking property `StageId` that defines the relevant stage id
            game = new GameDetails
                {
                    ID = response.ID,
                    GameName = response.GameName,
                    Questions = response.Questions.Where(q => q.StageID == stage).ToList(),
                };
            //if questions isactive=0 set toggle accordingly
            if (game.Questions.Count > 0)
            {
                countAnswers = game.Questions.FirstOrDefault()?.Answers.Count ?? 0;                // Copy other properties as needed
                isStageActive = game.Questions.FirstOrDefault(q => q.StageID == stage).isActive; ////////////////////////////////////////// IMPORTANT
            }
            StateHasChanged();
        }
        isLoading = false; // End loading

    }


    /*METHODS*/

    protected override async Task OnInitializedAsync()
    {
        await RefreshGameDetails();
        //load game detailes
        QuestionDescription = game.Questions.FirstOrDefault()?.QuestionDescription;
        questionID = game.Questions.FirstOrDefault()?.ID ?? 0;

    }

    private async Task ToggleStage()
    {
        if (isStageActive)
        {
            var response = await Http.PutAsync($"api/game/{UserId}/makeStageInactive/{game.ID}/{stage}", null);
            if (response.IsSuccessStatusCode)
            {
                isStageActive = false;
                await OnStageStatusChange.InvokeAsync(game.Questions.FirstOrDefault(q => q.StageID == stage));
            }

        }
        else
        {
            var response = await Http.PutAsync($"api/game/{UserId}/makeStageActive/{game.ID}/{stage}", null);
            if (response.IsSuccessStatusCode)
            {
                isStageActive = true;
                await OnStageStatusChange.InvokeAsync(game.Questions.FirstOrDefault(q => q.StageID == stage));

            }

        }
        await RefreshGameDetails();


    }

    private bool IsCorrectAnswer { get; set; }

    private void SetAnswerType(bool isCorrect)
    {
        IsCorrect = isCorrect;
        StateHasChanged();
    }

    private string GetLabelClass(bool isCorrect)
    {
        return IsCorrect == isCorrect ? "selectable-label" : "selectable-label selected";
    }

    private async Task HandleQuestionSubmit()
    {
        isLoading = true;  // Start showing the spinner immediately
        await DeleteImage();
        StateHasChanged();

        if (!editAnswer && game.Questions.Count == 0) // Adding a new question
        {
            // Question Validation
            if (QuestionDescription.Length > QuestionDescriptionMaxChars)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }
            var newQuestion = await AddQuestion();
            if (newQuestion != null)
            {
                StateHasChanged();
                ClearFormFields(); // Clear form fields after state change
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            await RefreshGameDetails();
        }
        else // Editing an existing question
        {
            // Question Validations
            if (QuestionDescription.Length > QuestionDescriptionMaxChars)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }

            bool hasImage = !string.IsNullOrEmpty(myFileImage) && myFileImage != "empty";
            QuestionToAdd editedQuestion = new QuestionToAdd
                {
                    GameID = game.ID,
                    HasImage = hasImage,
                    QuestionDescription = QuestionDescription,
                    QuestionImage = myFileImage,
                    ID = questionID,
                    StageID = stage
                };

            var response = await Http.PutAsJsonAsync($"api/game/{UserId}/updateQuestion/{questionID}", editedQuestion);
            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                ClearFormFields();
                editAnswer = false;
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            else
            {
                Console.WriteLine("Failed to edit question: " + await response.Content.ReadAsStringAsync());
                await ShowToast(false, "פעולת העריכה נכשלה", "fa-solid fa-circle-exclamation");
            }
        }
        await DeleteImage();
        StateHasChanged(); // Update the UI
        await RefreshGameDetails();
    }

    private async Task HandleAnswerSubmit()
    {
        isLoading = true;  // Start showing the spinner immediately
        await DeleteImage();
        StateHasChanged();
        // Ensure that the AnswerDescription has some text if an image is present
        if (string.IsNullOrWhiteSpace(CorrectAnswer) && CorrectImage != "empty") CorrectAnswer = "תשובה ללא טקסט";
        if (!editAnswer) // Adding a new answer
        {
            // Question Validation
            if (CorrectAnswer.Length > AnswersDescriptionMaxChars || CorrectAnswer.Length < 1)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }
            var newAnswer = await AddAnswers(questionID);
            if (newAnswer)
            {
                StateHasChanged();
                ClearFormFields(); // Clear form fields after state change
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            await RefreshGameDetails();
        }
        else // Editing an existing answer
        {
            // Ensure that the AnswerDescription has some text if an image is present
            if (string.IsNullOrWhiteSpace(CorrectAnswer) && CorrectImage != "empty") CorrectAnswer = "תשובה ללא טקסט";
            // Question Validations
            if (CorrectAnswer.Length > AnswersDescriptionMaxChars || CorrectAnswer.Length < 2)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }

            bool hasImage = !string.IsNullOrEmpty(CorrectImage) && CorrectImage != "empty";
            Console.WriteLine("Has Image? " + hasImage);
            var currentAnswer = game.Questions.FirstOrDefault()?.Answers.Where(a => a.ID == answerID);

            GameAnswers answer = new GameAnswers
                {
                    ID = currentAnswer.ElementAtOrDefault(0)?.ID ?? 0,
                    AnswerDescription = CorrectAnswer.ToString(),
                    IsCorrect = IsCorrect,
                    QuestionID = questionID,
                    HasImage = hasImage,
                    AnswerImage = CorrectImage
                };

            var response = await Http.PutAsJsonAsync($"api/game/{UserId}/updateAnswers/{answer.ID}", answer);
            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                ClearFormFields();
                editAnswer = false;
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            else
            {
                Console.WriteLine("Failed to edit question: " + await response.Content.ReadAsStringAsync());
                await ShowToast(false, "פעולת העריכה נכשלה", "fa-solid fa-circle-exclamation");
            }
        }
        await DeleteImage();
        StateHasChanged(); // Update the UI
        await RefreshGameDetails();
    }

    private async Task<GameQuestions> AddQuestion()
    {

        bool hasImage = !string.IsNullOrEmpty(myFileImage);
        QuestionToAdd questionToAdd = new QuestionToAdd()
            {
                GameID = game.ID,
                HasImage = hasImage,
                QuestionDescription = QuestionDescription,
                QuestionImage = myFileImage,
                StageID = stage
            };
        var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addQuestion/{gameCode}", questionToAdd);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            int questionId = int.Parse(result);
            GameQuestions newQuestion = new GameQuestions
                {
                    ID = questionId,
                    QuestionDescription = QuestionDescription,
                    QuestionImage = myFileImage,
                    HasImage = hasImage
                };

            await OnQuestionAdded.InvokeAsync(newQuestion);
            return newQuestion;
        }
        else
        {
            return null;
        }
    }

    private async Task<bool> AddAnswers(int questionId)
    {

        List<GameAnswers> answers = new List<GameAnswers>
        {
            new GameAnswers { AnswerDescription = CorrectAnswer, 
                IsCorrect = IsCorrect, 
                QuestionID = questionId, 
                HasImage = !string.IsNullOrEmpty(CorrectImage) && CorrectImage != "empty",
                AnswerImage = CorrectImage }
        };
        var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addAnswers/{questionId}", answers);
        if (response.IsSuccessStatusCode)
        {
            return true; // Return true indicating successful creation
        }
        else
        {
            Console.WriteLine("Failed to add answers: " + await response.Content.ReadAsStringAsync());
            return false; // Return false indicating failure to add answers
        }
    }

    private void EditQuestion(GameQuestions question)
    {
        ClearFormFields();
        editAnswer = true;
        questionID = question.ID;
        QuestionDescription = question.QuestionDescription;
        myFileImage = question.QuestionImage;
        var answer = question.Answers.FirstOrDefault();
        IsCorrect = answer.IsCorrect;
        StateHasChanged(); // Refresh UI with loaded data
    }

    private void EditAnswer(GameAnswers answer)
    {
        ClearFormFields();
        editAnswer = true;
        answerID = answer.ID;
        CorrectAnswer = answer.AnswerDescription;
        CorrectImage = answer.AnswerImage;
        IsCorrect = answer.IsCorrect;
        StateHasChanged(); // Refresh UI with loaded data
    }

    private async Task ConfirmDelete()
    {
        if (selectedQuestionForDeletion != null)
        {
            // Add question image to delete list if it has one
            if (selectedQuestionForDeletion.HasImage)
            {
                DeleteImages.Add(selectedQuestionForDeletion.QuestionImage);
            }

            await DeleteQuestion(selectedQuestionForDeletion);
            selectedQuestionForDeletion = null; // Reset the selected question
            isDeleteModalOpen = false; // Close the modal
            await RefreshGameDetails();
            ClearFormFields();
            myFileImage = "";
            countAnswers = 0;
            QuestionDescription = string.Empty;
            StateHasChanged(); // Refresh UI
        }

    }

    private async Task ConfirmDeleteAnswer()
    {
        if (selectedAnswerForDelete != null)
        {
            // Add answer image to delete list if it has one
            if (selectedAnswerForDelete.HasImage)
            {
                DeleteImages.Add(selectedAnswerForDelete.AnswerImage);
            }

            await DeleteAnswer(selectedAnswerForDelete);
            selectedAnswerForDelete = null; // Reset the selected answer
            isDeleteModalOpen = false; // Close the modal
            await RefreshGameDetails();
            ClearFormFields();
            CorrectImage = "empty";
            CorrectAnswer = string.Empty;
            StateHasChanged(); // Refresh UI
        }
    }

    private async Task DeleteAnswer(GameAnswers answer)
    {
        isLoading = true;
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteAnswer/{answer.ID}");
        if (response.IsSuccessStatusCode)
        {
            StateHasChanged(); // Call this to refresh the component if not automatically updating
            await ShowToast(true, "המסיח נמחק בהצלחה.", "fa-solid fa-circle-check");
        }
        else
        {
            await ShowToast(false, "פעולת המחיקה נכשלה", "fa-solid fa-circle-exclamation");
            Console.WriteLine("Failed to delete answer: " + await response.Content.ReadAsStringAsync());
        }
        await RefreshGameDetails();
    }

    private async Task DeleteQuestion(GameQuestions question)
    {
        isLoading = true;
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteQuestion/{question.ID}");
        if (response.IsSuccessStatusCode)
        {
            StateHasChanged(); // Call this to refresh the component if not automatically updating
            await OnQuestionDeleted.InvokeAsync(question);
            await ShowToast(true, "השאלה נמחקה בהצלחה.", "fa-solid fa-circle-check");
        }
        else
        {
            await ShowToast(false, "פעולת המחיקה נכשלה", "fa-solid fa-circle-exclamation");
            Console.WriteLine("Failed to delete question: " + await response.Content.ReadAsStringAsync());
        }
        questionID = 0;
        await RefreshGameDetails();

    }

    private string GetInputClass(int length, int minChars, int maxChars)
    {
        string resultClass;
        if (length == 0)
            resultClass = "text-muted"; // Neutral for zero characters
        else if (length < minChars)
            resultClass = "text-danger";  // Red for less than minimum characters
        else if (length >= minChars && length < maxChars - 3)
            resultClass = "text-good";   // Green for within the normal range
        else if (length >= maxChars - 3 && length <= maxChars)
            resultClass = "text-warning";  // Orange for nearing maximum length
        else
            resultClass = "text-muted";  // Fallback

        return resultClass;
    }

    private async Task UploadFile(InputFileChangeEventArgs e, string inputId)
    {
        isLoading = true;
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = await saveResponse.Content.ReadAsStringAsync();
                    string imageUrl = "uploadedFiles/" + resizeUrl;
                    switch (inputId)
                    {
                        case "FileInputID":
                            myFileImage = imageUrl;
                            break;
                        case "CorrectFileInputID":
                            CorrectImage = imageUrl;
                            break;
                    }
                    StateHasChanged(); // This ensures the UI updates with the new image
                }
            }
            //else resize to make sure file size is 300kb or less

        }
        isLoading = false;

    }

    private void MakeDeleteList(string inputId)
    {
        switch (inputId)
        {
            case "FileInputID":
                DeleteImages.Add(myFileImage);
                myFileImage = "";
                break;
            case "CorrectFileInputID":
                DeleteImages.Add(CorrectImage);
                CorrectImage = "empty";
                CorrectAnswer = "";
                break;
        }

        // Update the `questions` list accordingly
        var question = game.Questions.FirstOrDefault(q => q.ID == questionID);
        if (question != null)
        {
            question.QuestionImage = myFileImage;
            question.HasImage = !string.IsNullOrEmpty(myFileImage);
        }
        StateHasChanged();
    }

    private void ClearFormFields()
    {
        editAnswer = false;
        // Reset properties within the questionsAndAnswers model
        questionsAndAnswers.Questions.QuestionDescription = string.Empty;
        //QuestionDescription = "";
        CorrectAnswer = "";
        CorrectImage = "empty";
        IsCorrect = true;
        // myFileImage = string.Empty; // Clear the uploaded image preview
        questionDescriptionClass = GetInputClass(0, 2, QuestionDescriptionMaxChars);
        StateHasChanged();
    }

    private async Task DeleteImage()
    {
        if (DeleteImages.Count > 0)
        {
            var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeleteImages);
            if (saveResponse.IsSuccessStatusCode == true)
            {
                DeleteImages.Clear();
            }
            else
            {
            }
        }
    }

    private async Task RefreshGameDetails()
    {
        isLoading = true; // Start loading
        Console.WriteLine("Loading Stage ID: " + stage.ToString());

        var response = await Http.GetFromJsonAsync<GameDetails>($"api/game/{UserId}/getGame/{gameCode}");
        if (response != null)
        {
            game = new GameDetails
                {
                    ID = response.ID,
                    GameName = response.GameName,
                    Questions = response.Questions.Where(q => q.StageID == stage).ToList(),
                };
            if (game.Questions.Count > 0)
            {
                QuestionDescription = game.Questions.FirstOrDefault()?.QuestionDescription;
                questionID = game.Questions.FirstOrDefault()?.ID ?? 0;
                myFileImage = game.Questions.FirstOrDefault()?.QuestionImage;
                countAnswers = game.Questions.FirstOrDefault()?.Answers.Count ?? 0;
            }
            //if questions isactive=0 set toggle accordingly
            if (game.Questions.Count > 0)
            {
                isStageActive = game.Questions.FirstOrDefault(q => q.StageID == stage).isActive; ////////////////////////////////////////// IMPORTANT
            }
        }
       
        isLoading = false; // End loading
        StateHasChanged(); // This will trigger a UI update
    }

    private void failedSubmit()
    {
        StateHasChanged();
    }

    private void HandleInputChange(ChangeEventArgs e, string inputType)
    {
        var newValue = e.Value.ToString();
        switch (inputType)
        {
            case "QuestionDescription":
                QuestionDescription = newValue;
                break;
            case "CorrectAnswer":
                CorrectAnswer = newValue;
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    private async Task ShowToast(bool isSuccess, string message, string icon)
    {
        await JS.InvokeVoidAsync("showToast", isSuccess, message, icon);
    }
}  