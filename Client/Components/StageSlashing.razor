@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav
@using template.Shared.Models.Games;
@using template.Shared.Models.Users;


<div class="container-fluid">

    <!-- ROW 1 - TITLE -->
    <div class="row mb-4">
        <div class="col-md-7">
            <h3>
                דוכן חותכים תשובות
                <button type="button" class="btn bg-primary-subtle" data-bs-toggle="modal" data-bs-target=@($"#modal1")
                        style=" --bs-btn-padding-y: .25rem;  --bs-btn-padding-x: .5rem;  --bs-btn-font-size: .75rem;">
                    הסבר
                    <i class="fa fa-info-circle p-1" style="color:black;"></i>
                </button>
            </h3>
        </div>

        <div class="col-md-5 text-end">
            @if(isLoading)
            {
                <div class="spinner-border text-dark" role="status">
                    <span class="visually-hidden">טוען...</span>
                </div>
            }
            else
            {
                @foreach (var question in game.Questions)
                {
                    <button type="button" class="btn btn-secondary me-1" @onclick="() => selectedQuestionForDeletion = question"
                            data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal">
                        מחיקת דוכן
                    </button>
                }
                @if (isLoading)
                {
                    @*SHOW NOTHING*@
                }
                else
                {
                    if (game.Questions.Count > 0)
                    {
                        <button type="button" class="@toggleButtonClass" data-bs-toggle="modal" data-bs-target="#toggleModal">@toggleButtonText</button>
                    }
                }
            }
           
        </div>
    </div>

    <!-- ROW 2 - FORM AND QUESTION LIST -->
    <div class="row">
        <!-- Edit Form Column -->
        <div class="col-md-7 ">
            <div class="row mb-3">
                <div class="col-12">
                    <span> שאלה</span>
                    <span>(2-30 טווח תווים)</span>
                </div>
            </div>

            <EditForm Model="questionsAndAnswers" OnValidSubmit="HandleQuestionSubmit" OnInvalidSubmit="failedSubmit">
                <DataAnnotationsValidator />

                <!-- ROW - Form Input Fields -->
                <div class="mb-3 d-flex align-items-center">
                    <div class="col-7 p-0">
                        <InputText maxlength="@QuestionDescriptionMaxChars"
                                   class="form-control"
                                   id="question"
                                   @bind-Value="QuestionDescription"
                                   @oninput="@(e => HandleInputChange(e, nameof(questionsAndAnswers.Questions.QuestionDescription)))"
                                   placeholder="טקסט השאלה"
                                   aria-describedby="questionDescription" required />
                    </div>

                    <div class="col-2 pe-2">
                        <small id="questionDescription" class="@GetInputClass(QuestionDescription?.Length ?? 0, 2, @QuestionDescriptionMaxChars)">
                            @(QuestionDescription?.Length ?? 0)/@QuestionDescriptionMaxChars
                        </small>

                    </div>



                    <div class="col-2 ps-1">

                        @if (myFileImage != "")
                        {
                            <div class="img-wrapper">
                                <img src="@myFileImage" class="QuestionImage" width="30" />
                                <i class="fa-solid fa-trash  delete-image-btn" @onclick='() => MakeDeleteList("FileInputID")'></i>
                            </div>
                        }
                        else
                        {
                            <div class="col-2 ps-1">
                                <label class="" for="FileInputID">
                                    <i class="fa-solid fa-image image-upload-icon"></i>
                                </label>
                                <InputFile id="FileInputID" OnChange="@(e => UploadFile(e, "FileInputID"))" hidden />
                            </div>
                        }
                    </div>

                </div>

                    @if (isLoading)
                    {
                        <div class="spinner-border text-dark" role="status">
                            <span class="visually-hidden">Loading...</span>
                    </div>
                    }
                    else
                    {
                        <div class="mb-5 mt-3 col-9">
                            <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm me-1">שמירת שאלה</button>
                        </div>
                    }
               
            </EditForm>

            <EditForm Model="questionsAndAnswers" OnValidSubmit="HandleAnswerSubmit" OnInvalidSubmit="failedSubmit">
                <DataAnnotationsValidator />
                @if (game.Questions.Count > 0)
                {

                    <!-- Correct Answer -->
                    <label for="correctAnswer" class="form-label mt-3">תשובה</label>
                    <div class="mb-3 align-items-center">
                        <div class="col-7">
                            <InputText maxlength="@AnswersDescriptionMaxChars"
                                       class="form-control"
                                       id="correctAnswer"
                                       @bind-Value="CorrectAnswer"
                                       @oninput="@(e => HandleInputChange(e, nameof(CorrectAnswer)))"
                                       placeholder="טקסט לתשובה"
                                       aria-describedby="correctAnswer"
                                       disabled="@(!string.IsNullOrWhiteSpace(CorrectImage) && CorrectImage != "empty")"
                                       required />
                        </div>
                        <div class="col-1 p-0">
                            <small id="correctAnswer" class="@GetInputClass(CorrectAnswer.Length, 1, @AnswersDescriptionMaxChars)
                            col-2 p-0 d-flex justify-content-start">@CorrectAnswer.Length/@AnswersDescriptionMaxChars</small>
                        </div>

                        <div class="col-1 position-relative" style="padding-top: .5rem; height: 38px;">

                            <!-- Custom Icon Toggle -->
                            <div class="form-check form-switch">
                                <input class="form-check-input custom-icon-toggle" type="checkbox" id="iconToggle" disabled
                                       checked="@(!string.IsNullOrWhiteSpace(CorrectImage) && CorrectImage != "empty")">
                                <label class="form-check-label" for="iconToggle"></label>
                            </div>
                        </div>


                        @if (!string.IsNullOrWhiteSpace(CorrectImage) && CorrectImage != "empty")
                        {
                            <div class="col-2">
                                <div class="img-wrapper">
                                    <img src="@CorrectImage" class="QuestionImage" width="30" />
                                    <i class="fa-solid fa-trash delete-image-btn" @onclick='() => MakeDeleteList("CorrectFileInputID")'></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-2">
                                <label class="" for="CorrectFileInputID">
                                    <i class="fa-solid fa-image image-upload-icon"></i>
                                </label>
                                <InputFile id="CorrectFileInputID" OnChange="@(e => UploadFile(e, "CorrectFileInputID"))" hidden />
                            </div>
                        }
                    </div>

                    <!-- Answer Type Selection -->
                    <div class="d-flex align-items-center mb-5">
                        <span> בחרו: </span>
                        <div class="checkbox-wrapper-26 ms-3 me-3">
                            <input type="checkbox" id="correctAnswerToggle" @bind="IsCorrect" />
                            <label for="correctAnswerToggle">
                                <div class="tick_mark"></div>
                            </label>
                        </div>
                        <span class="answer-text">@((IsCorrect) ? "נכון" : "לא נכון")</span>
                    </div>

                    <!-- Submit ANSWER Button -->
                    <div class="mt-3 mb-2">
                        @if (!editAnswer)
                        {
                            @if (isLoading)
                            {
                                <div class="spinner-border text-dark" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm">הוספת תשובה</button>

                            }
                        }
                        else
                        {
                            //Save button
                            <button type="submit" id="liveToastBtn" class="btn btn-primary shadow-sm me-1">שמירה</button>
                            //Cancel button
                            <button type="button" class="btn btn-secondary shadow-sm" @onclick="ClearFormFields">ביטול</button>
                        }
                    </div>
                }

            </EditForm>
        </div>

        <!--QUESTIONS LIST -->
        @if (countAnswers > 0)
        {

            <div class="col-md-5 mt-4">
                <h5>רשימת תשובות</h5>
                <div class="scrollable-table-body">
                    <table class="table shadow-sm table-responsive border border-2">
                        <thead>
                            <tr>
                                <th class="col-md-6">מסיח</th>
                                <th class="col-md-2">תמונה</th>
                                <th class="col-md-2 text-center">עריכה</th>
                                <th class="col-md-2 text-center">מחיקה</th>
                            </tr>
                        </thead>

                        <tbody>
                            @if (isLoading)
                            {
                                <tr>
                                    <td colspan="4" class="text-center">
                                        <div class="spinner-border text-dark" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var question in game.Questions)
                                {
                                    foreach (var answer in question.Answers)
                                    {

                                        <tr class="@(answer.IsCorrect ? "table-success" : "table-danger")">
                                            <td class="truncate-text" data-length="20">@answer.AnswerDescription</td>
                                            <td>
                                                @if (answer.HasImage)
                                                {
                                                    <img src="@answer.AnswerImage" height="26" />
                                                }
                                            </td>

                                            <td class="text-center">
                                                <button class="btn btn-outline-primary btn-sm" @onclick="()=>EditAnswer(answer)">
                                                    <i class="fa-solid fa-square-pen fa-fw" style="width: 14px;"></i>
                                                </button>
                                            </td>

                                            <td class="text-center">
                                                <button class="btn btn-outline-danger btn-sm" @onclick="() => selectedAnswerForDelete = answer"
                                                        data-bs-toggle="modal" data-bs-target="#deleteAnswerConfirmationModal">
                                                    <i class="fa-solid fa-trash fa-fw" style="width: 14px;"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }

                                }
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        }

    </div>

    <div class="toast-container position-fixed top-0 end-0 p-3">
        <!--TOAST comes here-->
    </div>


    <!-- Delete QUESTION Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">מחיקת משחק</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    מחיקת השאלה תתבצע לצמיתות וללא יכולת שחזור, בטוחים?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDelete">מחיקה</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Delete ANSWER Confirmation Modal -->
    <div class="modal fade" id="deleteAnswerConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">מחיקת מסיח</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    מחיקת המסיח תתבצע לצמיתות וללא יכולת שחזור, בטוחים?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDeleteAnswer">מחיקה</button>
                </div>
            </div>
        </div>
    </div>





    <!-- Modal 1 -->
    <div class="modal fade" id=@($"modal1") tabindex="-1" aria-labelledby=@($"modalLabel1") aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id=@($"modalLabel1")>
                        חותכים תשובות
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>

                            מנגנון משחק – זיהוי תשובות נכונות
                    </p>
                    <i class="fa-regular fa-lightbulb" style="color:darkblue ;"></i>

                    במשחק זה יש לחתוך את התשובות הנכונות ולהניח ללא נכונות לעבור
                    <p>
                        <i class="fa-regular fa-lightbulb" style="color:darkblue ;"></i>

                        <b>הנחיות עריכה - </b>
                        הוסיפו שאלה ומסיחים והגדירו אילו מסיחים נכונים ואילו לא.
                    </p>
                   
                </div>
                <div class="text-center p-2">
                    <img src="./assets-images/stageSlash4.png" class="img-fluid rounded mx-auto d-block" alt="Image description">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">הבנתי</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toggle Confirmation Modal -->
    <div class="modal fade" id="toggleModal" tabindex="-1" aria-labelledby="toggleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="toggleModalLabel">@modalTitle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @modalMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ביטול</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="ToggleStage">אישור</button>
                </div>
            </div>
        </div>
    </div>

</div>

@if (msg != "")
{
    <p>@msg</p>
}




@code {
    [CascadingParameter] public int UserId { get; set; }
    [Parameter] public string gameCode { get; set; }
    [Parameter] public GameDetails game { get; set; }
    [Parameter] public int stage { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnQuestionAdded { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnQuestionDeleted { get; set; }
    [Parameter] public EventCallback<GameQuestions> OnStageStatusChange { get; set; }

    [Parameter] public bool isLoading { get; set; }  // State variable to track loading status

    private QuestionToAdd questionToAdd = new QuestionToAdd();
    private GameAnswers answersToAdd = new GameAnswers();
    private QuestionsAndAnswers questionsAndAnswers = new QuestionsAndAnswers();

    string QuestionDescription = string.Empty;
    string CorrectAnswer = string.Empty;


    bool IsCorrect = true; // Default to true for correct answer

    int QuestionDescriptionCount => QuestionDescription.Length;
    int CorrectAnswerCount => CorrectAnswer.Length;

    int QuestionDescriptionMaxChars = 50;
    int AnswersDescriptionMaxChars = 20;
    int questionID = 0;
    int answerID = 0;

    int countAnswers = 0;

    bool editAnswer = false;
    bool hasimage = false;
    private IBrowserFile questionImageFile;

    private string imagePreview;
    string myFileImage = "";
    string CorrectImage = "empty";


    long maxFileSize = 4194304;
    private EditContext editContext;

    string msg = "";
    bool isDeleteModalOpen = false;

    List<string> DeleteImages = new List<string>();

    string questionDescriptionClass = "text-muted"; // Default class
    private GameQuestions selectedQuestionForDeletion;
    private GameAnswers selectedAnswerForDelete;


    private bool isStageActive = true;
    private string toggleButtonText => isStageActive ? "כיבוי דוכן" : "הפעלת דוכן";
    private string toggleButtonClass => isStageActive ? "btn btn-secondary" : "btn btn-primary";
    private string modalTitle => isStageActive ? "כיבוי דוכן" : "הפעלת דוכן";
    private string modalMessage => isStageActive ? "האם לכבות את הדוכן? עדיין תוכלו לערוך אך שאלות בדוכן זה לא יהיו פעילות ולא ייחשבו בעת פרסום" : "האם להפעיל את הדוכן?";


    /*METHODS*/


    protected override async Task OnInitializedAsync()
    {
        await RefreshGameDetails();
        //load game detailes
        QuestionDescription = game.Questions.FirstOrDefault()?.QuestionDescription;
        questionID = game.Questions.FirstOrDefault()?.ID ?? 0;

    }


    private async Task ToggleStage()
    {
        if (isStageActive)
        {
            var response = await Http.PutAsync($"api/game/{UserId}/makeStageInactive/{game.ID}/{stage}", null);
            if (response.IsSuccessStatusCode)
            {
                isStageActive = false;
                await OnStageStatusChange.InvokeAsync(game.Questions.FirstOrDefault(q => q.StageID == stage));
            }

        }
        else
        {
            var response = await Http.PutAsync($"api/game/{UserId}/makeStageActive/{game.ID}/{stage}", null);
            if (response.IsSuccessStatusCode)
            {
                isStageActive = true;
                await OnStageStatusChange.InvokeAsync(game.Questions.FirstOrDefault(q => q.StageID == stage));

            }

        }
        await RefreshGameDetails();


    }

    private bool IsCorrectAnswer { get; set; }

    private void SetAnswerType(bool isCorrect)
    {
        IsCorrect = isCorrect;
        StateHasChanged();
    }

    private string GetLabelClass(bool isCorrect)
    {
        return IsCorrect == isCorrect ? "selectable-label" : "selectable-label selected";
    }

    private async Task HandleQuestionSubmit()
    {
        isLoading = true;  // Start showing the spinner immediately
        await DeleteImage();
        StateHasChanged();

        if (!editAnswer && game.Questions.Count == 0) // Adding a new question
        {
            // Question Validation
            if (QuestionDescription.Length > QuestionDescriptionMaxChars)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }
            var newQuestion = await AddQuestion();
            if (newQuestion != null)
            {
                StateHasChanged();
                ClearFormFields(); // Clear form fields after state change
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            await RefreshGameDetails();
        }
        else // Editing an existing question
        {
            // Question Validations
            if (QuestionDescription.Length > QuestionDescriptionMaxChars)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }

            bool hasImage = !string.IsNullOrEmpty(myFileImage) && myFileImage != "empty";
            QuestionToAdd editedQuestion = new QuestionToAdd
                {
                    GameID = game.ID,
                    HasImage = hasImage,
                    QuestionDescription = QuestionDescription,
                    QuestionImage = myFileImage,
                    ID = questionID,
                    StageID = stage
                };

            var response = await Http.PutAsJsonAsync($"api/game/{UserId}/updateQuestion/{questionID}", editedQuestion);
            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                ClearFormFields();
                editAnswer = false;
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            else
            {
                Console.WriteLine("Failed to edit question: " + await response.Content.ReadAsStringAsync());
                await ShowToast(false, "פעולת העריכה נכשלה", "fa-solid fa-circle-exclamation");
            }
        }
        await DeleteImage();
        StateHasChanged(); // Update the UI
        await RefreshGameDetails();
    }

    //Handle Answer Submit
    private async Task HandleAnswerSubmit()
    {
        isLoading = true;  // Start showing the spinner immediately
        await DeleteImage();
        StateHasChanged();
        // Ensure that the AnswerDescription has some text if an image is present
        if (string.IsNullOrWhiteSpace(CorrectAnswer) && CorrectImage != "empty") CorrectAnswer = "תשובה ללא טקסט";
        if (!editAnswer) // Adding a new answer
        {
            // Question Validation
            if (CorrectAnswer.Length > AnswersDescriptionMaxChars || CorrectAnswer.Length < 1)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }
            var newAnswer = await AddAnswers(questionID);
            if (newAnswer)
            {
                StateHasChanged();
                ClearFormFields(); // Clear form fields after state change
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            await RefreshGameDetails();
        }
        else // Editing an existing answer
        {
            // Ensure that the AnswerDescription has some text if an image is present
            if (string.IsNullOrWhiteSpace(CorrectAnswer) && CorrectImage != "empty") CorrectAnswer = "תשובה ללא טקסט";
            // Question Validations
            if (CorrectAnswer.Length > AnswersDescriptionMaxChars || CorrectAnswer.Length < 2)
            {
                await ShowToast(false, "יש להזין את השדות במבנה המתאים", "fa-solid fa-circle-exclamation");
                isLoading = false;
                return;
            }

            bool hasImage = !string.IsNullOrEmpty(CorrectImage) && CorrectImage != "empty";
            Console.WriteLine("Has Image? " + hasImage);
            var currentAnswer = game.Questions.FirstOrDefault()?.Answers.Where(a => a.ID == answerID);

            GameAnswers answer = new GameAnswers
                {
                    ID = currentAnswer.ElementAtOrDefault(0)?.ID ?? 0,
                    AnswerDescription = CorrectAnswer.ToString(),
                    IsCorrect = IsCorrect,
                    QuestionID = questionID,
                    HasImage = hasImage,
                    AnswerImage = CorrectImage
                };

            var response = await Http.PutAsJsonAsync($"api/game/{UserId}/updateAnswers/{answer.ID}", answer);
            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                ClearFormFields();
                editAnswer = false;
                await ShowToast(true, "השאלה נשמרה בהצלחה!", "fa-solid fa-circle-check");
            }
            else
            {
                Console.WriteLine("Failed to edit question: " + await response.Content.ReadAsStringAsync());
                await ShowToast(false, "פעולת העריכה נכשלה", "fa-solid fa-circle-exclamation");
            }
        }
        await DeleteImage();
        StateHasChanged(); // Update the UI
        await RefreshGameDetails();
    }

    private async Task<GameQuestions> AddQuestion()
    {

        bool hasImage = !string.IsNullOrEmpty(myFileImage);
        QuestionToAdd questionToAdd = new QuestionToAdd()
            {
                GameID = game.ID,
                HasImage = hasImage,
                QuestionDescription = QuestionDescription,
                QuestionImage = myFileImage,
                StageID = stage
            };
        var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addQuestion/{gameCode}", questionToAdd);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            int questionId = int.Parse(result);
            GameQuestions newQuestion = new GameQuestions
                {
                    ID = questionId,
                    QuestionDescription = QuestionDescription,
                    QuestionImage = myFileImage,
                    HasImage = hasImage
                };

            await OnQuestionAdded.InvokeAsync(newQuestion);
            return newQuestion;
        }
        else
        {
            return null;
        }
    }

    private async Task<bool> AddAnswers(int questionId)
    {

        List<GameAnswers> answers = new List<GameAnswers>
        {
            new GameAnswers { AnswerDescription = CorrectAnswer, 
                IsCorrect = IsCorrect, 
                QuestionID = questionId, 
                HasImage = !string.IsNullOrEmpty(CorrectImage) && CorrectImage != "empty",
                AnswerImage = CorrectImage }
        };
        var response = await Http.PostAsJsonAsync($"api/game/{UserId}/addAnswers/{questionId}", answers);
        if (response.IsSuccessStatusCode)
        {
            return true; // Return true indicating successful creation
        }
        else
        {
            Console.WriteLine("Failed to add answers: " + await response.Content.ReadAsStringAsync());
            return false; // Return false indicating failure to add answers
        }
    }

    private void EditQuestion(GameQuestions question)
    {
        ClearFormFields();
        editAnswer = true;
        questionID = question.ID;
        QuestionDescription = question.QuestionDescription;
        myFileImage = question.QuestionImage;
        var answer = question.Answers.FirstOrDefault();
        IsCorrect = answer.IsCorrect;
        StateHasChanged(); // Refresh UI with loaded data
    }

    //editanswer
    private void EditAnswer(GameAnswers answer)
    {
        ClearFormFields();
        editAnswer = true;
        answerID = answer.ID;
        CorrectAnswer = answer.AnswerDescription;
        CorrectImage = answer.AnswerImage;
        IsCorrect = answer.IsCorrect;
        StateHasChanged(); // Refresh UI with loaded data
    }



    private async Task ConfirmDelete()
    {
        if (selectedQuestionForDeletion != null)
        {
            // Add question image to delete list if it has one
            if (selectedQuestionForDeletion.HasImage)
            {
                DeleteImages.Add(selectedQuestionForDeletion.QuestionImage);
            }

            await DeleteQuestion(selectedQuestionForDeletion);
            selectedQuestionForDeletion = null; // Reset the selected question
            isDeleteModalOpen = false; // Close the modal
            await RefreshGameDetails();
            ClearFormFields();
            myFileImage = "";
            countAnswers = 0;
            QuestionDescription = string.Empty;
            StateHasChanged(); // Refresh UI
        }

    }


    //ConfirmDeleteAnswer
    private async Task ConfirmDeleteAnswer()
    {
        if (selectedAnswerForDelete != null)
        {
            // Add answer image to delete list if it has one
            if (selectedAnswerForDelete.HasImage)
            {
                DeleteImages.Add(selectedAnswerForDelete.AnswerImage);
            }

            await DeleteAnswer(selectedAnswerForDelete);
            selectedAnswerForDelete = null; // Reset the selected answer
            isDeleteModalOpen = false; // Close the modal
            await RefreshGameDetails();
            ClearFormFields();
            CorrectImage = "empty";
            CorrectAnswer = string.Empty;
            StateHasChanged(); // Refresh UI
        }
    }


    //DeleteAnswer
    private async Task DeleteAnswer(GameAnswers answer)
    {
        isLoading = true;
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteAnswer/{answer.ID}");
        if (response.IsSuccessStatusCode)
        {
            StateHasChanged(); // Call this to refresh the component if not automatically updating
            await ShowToast(true, "המסיח נמחק בהצלחה.", "fa-solid fa-circle-check");
        }
        else
        {
            await ShowToast(false, "פעולת המחיקה נכשלה", "fa-solid fa-circle-exclamation");
            Console.WriteLine("Failed to delete answer: " + await response.Content.ReadAsStringAsync());
        }
        await RefreshGameDetails();
    }


    private async Task DeleteQuestion(GameQuestions question)
    {
        isLoading = true;
        var response = await Http.DeleteAsync($"api/game/{UserId}/deleteQuestion/{question.ID}");
        if (response.IsSuccessStatusCode)
        {
            StateHasChanged(); // Call this to refresh the component if not automatically updating
            await OnQuestionDeleted.InvokeAsync(question);
            await ShowToast(true, "השאלה נמחקה בהצלחה.", "fa-solid fa-circle-check");
        }
        else
        {
            await ShowToast(false, "פעולת המחיקה נכשלה", "fa-solid fa-circle-exclamation");
            Console.WriteLine("Failed to delete question: " + await response.Content.ReadAsStringAsync());
        }
        await RefreshGameDetails();

    }

    private string GetInputClass(int length, int minChars, int maxChars)
    {
        string resultClass;
        if (length == 0)
            resultClass = "text-muted"; // Neutral for zero characters
        else if (length < minChars)
            resultClass = "text-danger";  // Red for less than minimum characters
        else if (length >= minChars && length < maxChars - 3)
            resultClass = "text-good";   // Green for within the normal range
        else if (length >= maxChars - 3 && length <= maxChars)
            resultClass = "text-warning";  // Orange for nearing maximum length
        else
            resultClass = "text-muted";  // Fallback

        return resultClass;
    }

    private async Task UploadFile(InputFileChangeEventArgs e, string inputId)
    {
        isLoading = true;
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = await saveResponse.Content.ReadAsStringAsync();
                    string imageUrl = "uploadedFiles/" + resizeUrl;
                    switch (inputId)
                    {
                        case "FileInputID":
                            myFileImage = imageUrl;
                            break;
                        case "CorrectFileInputID":
                            CorrectImage = imageUrl;
                            break;
                    }
                    StateHasChanged(); // This ensures the UI updates with the new image
                }
            }
            //else resize to make sure file size is 300kb or less

        }
        isLoading = false;

    }

    private void MakeDeleteList(string inputId)
    {
        switch (inputId)
        {
            case "FileInputID":
                DeleteImages.Add(myFileImage);
                myFileImage = "";
                break;
            case "CorrectFileInputID":
                DeleteImages.Add(CorrectImage);
                CorrectImage = "empty";
                CorrectAnswer = "";
                break;
        }

        // Update the `questions` list accordingly
        var question = game.Questions.FirstOrDefault(q => q.ID == questionID);
        if (question != null)
        {
            question.QuestionImage = myFileImage;
            question.HasImage = !string.IsNullOrEmpty(myFileImage);
        }
        StateHasChanged();
    }

    private void ClearFormFields()
    {
        editAnswer = false;
        // Reset properties within the questionsAndAnswers model
        questionsAndAnswers.Questions.QuestionDescription = string.Empty;
        //QuestionDescription = "";
        CorrectAnswer = "";
        CorrectImage = "empty";
        IsCorrect = true;
        // myFileImage = string.Empty; // Clear the uploaded image preview
        questionDescriptionClass = GetInputClass(0, 2, QuestionDescriptionMaxChars);
        StateHasChanged();
    }

    private async Task DeleteImage()
    {
        if (DeleteImages.Count > 0)
        {
            var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeleteImages);
            if (saveResponse.IsSuccessStatusCode == true)
            {
                DeleteImages.Clear();
            }
            else
            {
            }
        }
    }

    private async Task RefreshGameDetails()
    {
        Console.WriteLine("Loading Stage ID: " + stage.ToString());
        isLoading = true; // Start loading

        var response = await Http.GetFromJsonAsync<GameDetails>($"api/game/{UserId}/getGame/{gameCode}");
        if (response != null)
        {
            game = new GameDetails
                {
                    ID = response.ID,
                    GameName = response.GameName,
                    Questions = response.Questions.Where(q => q.StageID == stage).ToList(),
                };
            if (game.Questions.Count > 0)
            {
                QuestionDescription = game.Questions.FirstOrDefault()?.QuestionDescription;
                questionID = game.Questions.FirstOrDefault()?.ID ?? 0;
                myFileImage = game.Questions.FirstOrDefault()?.QuestionImage;
                countAnswers = game.Questions.FirstOrDefault()?.Answers.Count ?? 0;
            }
            //if questions isactive=0 set toggle accordingly
            if (game.Questions.Count > 0)
            {
                isStageActive = game.Questions.FirstOrDefault(q => q.StageID == stage).isActive; ////////////////////////////////////////// IMPORTANT
            }
        }
       
        isLoading = false; // End loading
        StateHasChanged(); // This will trigger a UI update
    }

    private void failedSubmit()
    {
        StateHasChanged();
    }

    private void HandleInputChange(ChangeEventArgs e, string inputType)
    {
        var newValue = e.Value.ToString();
        switch (inputType)
        {
            case "QuestionDescription":
                QuestionDescription = newValue;
                break;
            case "CorrectAnswer":
                CorrectAnswer = newValue;
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    private async Task ShowToast(bool isSuccess, string message, string icon)
    {
        await JS.InvokeVoidAsync("showToast", isSuccess, message, icon);
    }
}  